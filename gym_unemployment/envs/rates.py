'''

    rates.py

    rates for moving agents from state to another

'''

import numpy as np
from scipy.interpolate import interp1d

class Rates():
    def __init__(self,year=2018,max_age=70,n_groups=6,timestep=0.25,min_age=18,inv_timestep=0):
        self.year=year
        self.max_age=max_age
        self.min_age=min_age
        self.n_groups=n_groups
        self.timestep=timestep
        self.inv_timestep=inv_timestep
        
        self.group_weights=np.zeros(3)
        self.group_weights=[0.3,0.5,0.2]

    def get_wees(self,w0,w1,intensity):
        '''
        Säätää kolmannen ryhmän intensiteetin niin että kaikkien kolmen ryhmän painot ovat 1.0
        '''
        return w0*intensity,w1*intensity,get_w(w0,w1)*intensity
    
    def get_w(self,a0,a1):
        return (1-a0*self.group_weights[0]-a1*self.group_weights[1])/self.group_weights[2]
        
    def get_mort_rate(self,debug=False):
        '''
        Kuolleisuus-intensiteetit eri ryhmille
        '''
        mort=np.zeros((101,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([1.3,1.0,0.8,1.15,1.0,0.85])
        # tilastokeskuksen kuolleisuusdata 2017 sukupuolittain
        mort[:,1]=np.array([2.12,0.32,0.17,0.07,0.07,0.10,0.00,0.09,0.03,0.13,0.03,0.07,0.10,0.10,0.10,0.23,0.50,0.52,0.42,0.87,0.79,0.66,0.71,0.69,0.98,0.80,0.77,1.07,0.97,0.76,0.83,1.03,0.98,1.20,1.03,0.76,1.22,1.29,1.10,1.26,1.37,1.43,1.71,2.32,2.22,1.89,2.05,2.15,2.71,2.96,3.52,3.54,4.30,4.34,5.09,4.75,6.17,5.88,6.67,8.00,9.20,10.52,10.30,12.26,12.74,13.22,15.03,17.24,18.14,17.78,20.35,25.57,23.53,26.50,28.57,31.87,34.65,40.88,42.43,52.28,59.26,62.92,68.86,72.70,94.04,99.88,113.11,128.52,147.96,161.89,175.99,199.39,212.52,248.32,260.47,284.01,319.98,349.28,301.37,370.17,370.17])/1000.0
        mort[:,0]=dfactor[0]*mort[:,1]
        mort[:,2]=dfactor[2]*mort[:,1]
        mort[:,4]=np.array([1.89,0.30,0.11,0.03,0.14,0.03,0.16,0.07,0.13,0.03,0.00,0.07,0.07,0.07,0.18,0.14,0.07,0.31,0.31,0.30,0.33,0.26,0.18,0.33,0.56,0.17,0.32,0.29,0.35,0.24,0.55,0.35,0.23,0.39,0.48,0.38,0.35,0.80,0.42,0.65,0.50,0.68,0.80,1.12,0.99,0.88,1.13,1.01,1.07,1.68,1.79,2.16,1.87,2.32,2.67,2.69,2.88,2.86,3.73,4.19,3.66,4.97,5.20,5.52,6.05,7.17,7.48,7.32,8.88,10.33,10.72,12.77,12.13,13.30,16.18,18.30,17.50,24.63,26.53,29.88,32.65,38.88,46.95,51.30,60.00,64.73,79.35,90.94,105.11,118.46,141.44,155.07,163.11,198.45,207.92,237.21,254.75,311.31,299.59,356.64,356.64])/1000.0
        mort[:,3]=dfactor[3]*mort[:,4]
        mort[:,5]=dfactor[5]*mort[:,4]
        
        mort=1-(1-mort)**self.timestep        

        return mort

    def get_mort_rate_1980(self,debug=False):
        '''
        Kuolleisuus-intensiteetit eri ryhmille
        '''
        mort=np.zeros((111,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([1.3,1.0,0.8,1.15,1.0,0.85])
        # ETK:sta saatu 1980-luvulla syntyneiden kuolleisuus
        mort[:,1]=np.array([0.00212,0.00032,0.00017,0.00007,0.00007,0.00087,0.000955,0.001285,0.001025,0.001145,0.001215,0.00121,0.00127,0.001195,0.001075,0.00087,0.000922918,0.001110727,0.001282406,0.001139091,0.001116819,0.001296377,0.001214769,0.001472221,0.001499108,0.001633651,0.001885631,0.001788105,0.001846841,0.002097677,0.002221515,0.002421873,0.0027286,0.002917021,0.002914952,0.003141551,0.003421786,0.003739702,0.003865086,0.004478511,0.004500349,0.005024217,0.005204155,0.005590178,0.006185707,0.006493172,0.006431219,0.006586458,0.006987948,0.007511778,0.007798334,0.007943255,0.008656053,0.009215786,0.010144656,0.011131939,0.011644146,0.012906354,0.014844232,0.01649505,0.018757944,0.0217792,0.024105325,0.028190449,0.034549837,0.039611964,0.047004774,0.058700039,0.070188116,0.084493879,0.099945389,0.123643555,0.142760694,0.164092641,0.197935225,0.216982235,0.265127613,0.280274881,0.275028974,0.287887892,0.35428496,0.392993994,0.432764875,0.465257645,0.492725928,0.537519397,0.628697246,0.722197558,0.818099442,0.913452665,1])
        mort[:,0]=dfactor[0]*mort[:,1]
        mort[:,2]=dfactor[2]*mort[:,1]
        mort[:,4]=np.array([0.00189,0.00030,0.00011,0.00003,0.00014,0.000325,0.00031,0.00039,0.000325,0.0004,0.00027,0.000415,0.00036,0.000345,0.00048,0.000495,0.000468017,0.00047721,0.000515887,0.00039946,0.000558615,0.000542183,0.000638361,0.000627876,0.000656854,0.000734585,0.000829,0.00091037,0.000973696,0.001008048,0.001298423,0.001476736,0.001516427,0.001625692,0.00156296,0.001933662,0.00204209,0.002342013,0.002163112,0.002589884,0.002667757,0.003058396,0.003213089,0.003280551,0.003629715,0.003708516,0.004042156,0.003728079,0.004124743,0.00426416,0.00430204,0.004666305,0.004781228,0.005068466,0.00538157,0.005867491,0.006224905,0.00672271,0.007854882,0.008882479,0.010215929,0.011324204,0.013350124,0.016087627,0.018268187,0.022744102,0.02795395,0.035096801,0.043252218,0.052214304,0.066612172,0.077688104,0.094474234,0.117901039,0.139713337,0.166605302,0.191522394,0.234507695,0.275085355,0.308817553,0.323885781,0.345976875,0.370988961,0.401858969,0.433311165,0.50664124,0.598530036,0.691476197,0.785491061,0.881467234,0.977861496])
        mort[:,3]=dfactor[3]*mort[:,4]
        mort[:,5]=dfactor[5]*mort[:,4]
        
        mort=1-(1-mort)**self.timestep

        return mort    

    def get_student_rate(self,debug=False):
        '''
        opiskelijoiden intensiteetit eri ryhmille
        '''
        print('student year',self.year)
        if self.year==2018:
            miehet_in=np.array([0.50303,0.15309,0.13078,0.09135,0.08725,0.07693,0.05842,0.04206,0.03097,0.02363,0.02284,0.01833,0.01612,0.01332,0.01061,0.01002,0.00882,0.00801,0.00729,0.00701,0.00640,0.00571,0.00538,0.00523,0.00449,0.00408,0.00396,0.00384,0.00358,0.00355,0.00346,0.00300,0.00284,0.00262,0.00243,0.00244,0.00211,0.00201,0.00194,0.00175,0.00133,0.00110,0.00094,0.00094,0.00107,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.34239,0.09581,0.10005,0.09388,0.08540,0.06906,0.05132,0.04099,0.03290,0.02587,0.02835,0.02501,0.02145,0.01930,0.01792,0.01649,0.01542,0.01467,0.01277,0.01163,0.01095,0.00925,0.00854,0.00805,0.00737,0.00655,0.00615,0.00568,0.00561,0.00502,0.00458,0.00447,0.00414,0.00325,0.00301,0.00301,0.00291,0.00244,0.00238,0.00183,0.00154,0.00135,0.00094,0.00070,0.00071,0.00156,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.64266,0.33548,0.34003,0.22310,0.28109,0.38819,0.43322,0.42976,0.41436,0.40765,0.43483,0.36232,0.41566,0.44173,0.30302,0.36713,0.33349,0.33508,0.28783,0.33393,0.35167,0.31066,0.27129,0.39125,0.33928,0.28342,0.28179,0.31784,0.26314,0.27495,0.38577,0.30775,0.33342,0.32432,0.43695,0.25000,0.37151,0.25000,0.36419,0.50062,0.44009,0.47991,0.25000,0.63538,0.25000,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.722811,0.21239287,0.2,0.268444412,0.349643789,0.40692194,0.376852545,0.381453184,0.392332101,0.31659522,0.358845491,0.380476852,0.342555722,0.312597579,0.315117943,0.306574583,0.288007057,0.365772473,0.330328848,0.30226561,0.393024915,0.319283036,0.296950084,0.328489023,0.359464313,0.30851433,0.328071132,0.261512379,0.353286164,0.338769959,0.277622167,0.324821103,0.465157113,0.329533382,0.25,0.289802679,0.412603275,0.289842098,0.486043184,0.419246695,0.38650579,0.581503542,0.529091057,0.563665491,0.25,0.25,1,0,0,0,0,0,0])
        elif self.year==2019:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,1.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2020:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,0.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2021:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,0.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        else:
            error(1)        
            
        inrate=np.zeros((101,self.n_groups))
        inrate[18:71,0] =miehet_in
        inrate[18:71,1] =miehet_in
        inrate[18:71,2] =miehet_in
        inrate[18:71,3] =naiset_in
        inrate[18:71,4] =naiset_in
        inrate[18:71,5] =naiset_in
        
        outrate=np.zeros((101,self.n_groups))
        outrate[18:71,0]=miehet_ulos
        outrate[18:71,1]=miehet_ulos
        outrate[18:71,2]=miehet_ulos
        outrate[18:71,3]=naiset_ulos
        outrate[18:71,4]=naiset_ulos
        outrate[18:71,5]=naiset_ulos
        
        #inrate=inrate*self.timestep
        inrate=1-(1-inrate)**self.timestep
        #outrate=outsider_outrate*self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate
        
    def get_student_rate_v2(self,debug=False):
        '''
        opiskelijoiden intensiteetit eri ryhmille
        päivitetty 13.10.2021
        '''
        print('student year',self.year)
        if self.year==2018:
            miehet_in=np.array([0.50303,0.15309,0.13078,0.09135,0.08725,0.07693,0.05842,0.04206,0.03097,0.02363,0.02284,0.01833,0.01612,0.01332,0.01061,0.01002,0.00882,0.00801,0.00729,0.00701,0.00640,0.00571,0.00538,0.00523,0.00449,0.00408,0.00396,0.00384,0.00358,0.00355,0.00346,0.00300,0.00284,0.00262,0.00243,0.00244,0.00211,0.00201,0.00194,0.00175,0.00133,0.00110,0.00094,0.00094,0.00107,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.34239,0.09581,0.10005,0.09388,0.08540,0.06906,0.05132,0.04099,0.03290,0.02587,0.02835,0.02501,0.02145,0.01930,0.01792,0.01649,0.01542,0.01467,0.01277,0.01163,0.01095,0.00925,0.00854,0.00805,0.00737,0.00655,0.00615,0.00568,0.00561,0.00502,0.00458,0.00447,0.00414,0.00325,0.00301,0.00301,0.00291,0.00244,0.00238,0.00183,0.00154,0.00135,0.00094,0.00070,0.00071,0.00156,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.64266,0.33548,0.34003,0.22310,0.28109,0.38819,0.43322,0.42976,0.41436,0.40765,0.43483,0.36232,0.41566,0.44173,0.30302,0.36713,0.33349,0.33508,0.28783,0.33393,0.35167,0.31066,0.27129,0.39125,0.33928,0.28342,0.28179,0.31784,0.26314,0.27495,0.38577,0.30775,0.33342,0.32432,0.43695,0.25000,0.37151,0.25000,0.36419,0.50062,0.44009,0.47991,0.25000,0.63538,0.25000,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.722811,0.21239287,0.2,0.268444412,0.349643789,0.40692194,0.376852545,0.381453184,0.392332101,0.31659522,0.358845491,0.380476852,0.342555722,0.312597579,0.315117943,0.306574583,0.288007057,0.365772473,0.330328848,0.30226561,0.393024915,0.319283036,0.296950084,0.328489023,0.359464313,0.30851433,0.328071132,0.261512379,0.353286164,0.338769959,0.277622167,0.324821103,0.465157113,0.329533382,0.25,0.289802679,0.412603275,0.289842098,0.486043184,0.419246695,0.38650579,0.581503542,0.529091057,0.563665491,0.25,0.25,1,0,0,0,0,0,0])
        elif self.year==2019:
            miehet_in=np.array([0.48716,0.13850,0.12426,0.09389,0.09025,0.07713,0.05905,0.04263,0.03179,0.02438,0.02301,0.01889,0.01580,0.01428,0.01211,0.00998,0.00970,0.00910,0.00788,0.00784,0.00700,0.00642,0.00640,0.00556,0.00497,0.00470,0.00415,0.00415,0.00390,0.00445,0.00363,0.00335,0.00308,0.00282,0.00283,0.00227,0.00230,0.00202,0.00175,0.00178,0.00151,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2020:
            miehet_in=np.array([0.48716,0.13850,0.12426,0.09389,0.09025,0.07713,0.05905,0.04263,0.03179,0.02438,0.02301,0.01889,0.01580,0.01428,0.01211,0.00998,0.00970,0.00910,0.00788,0.00784,0.00700,0.00642,0.00640,0.00556,0.00497,0.00470,0.00415,0.00415,0.00390,0.00445,0.00363,0.00335,0.00308,0.00282,0.00283,0.00227,0.00230,0.00202,0.00175,0.00178,0.00151,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2021:
            miehet_in=np.array([0.48716,0.13850,0.12426,0.09389,0.09025,0.07713,0.05905,0.04263,0.03179,0.02438,0.02301,0.01889,0.01580,0.01428,0.01211,0.00998,0.00970,0.00910,0.00788,0.00784,0.00700,0.00642,0.00640,0.00556,0.00497,0.00470,0.00415,0.00415,0.00390,0.00445,0.00363,0.00335,0.00308,0.00282,0.00283,0.00227,0.00230,0.00202,0.00175,0.00178,0.00151,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        else:
            error(1)        
            
        inrate=np.zeros((101,self.n_groups))
        inrate[18:71,0] =miehet_in
        inrate[18:71,1] =miehet_in
        inrate[18:71,2] =miehet_in
        inrate[18:71,3] =naiset_in
        inrate[18:71,4] =naiset_in
        inrate[18:71,5] =naiset_in
        
        outrate=np.zeros((101,self.n_groups))
        outrate[18:71,0]=miehet_ulos
        outrate[18:71,1]=miehet_ulos
        outrate[18:71,2]=miehet_ulos
        outrate[18:71,3]=naiset_ulos
        outrate[18:71,4]=naiset_ulos
        outrate[18:71,5]=naiset_ulos
        
        #inrate=inrate*self.timestep
        inrate=1-(1-inrate)**self.timestep
        #outrate=outsider_outrate*self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate        

    def get_outsider_rate(self,debug=False):
        '''
        sairauspäivärahalle jäävien osuudet
        '''
        inrate=np.zeros((101,self.n_groups))
        outrate=np.zeros((101,self.n_groups))
        
        if self.year==2018:
            miehet_in=np.array([0.29619,0.12647,0.05789,0.02268,0.01884,0.01704,0.01547,0.01471,0.01403,0.01350,0.01391,0.01346,0.01487,0.01328,0.01361,0.01277,0.01236,0.01163,0.01117,0.01128,0.01084,0.01040,0.01026,0.01013,0.00945,0.01042,0.00950,0.00934,0.00924,0.00925,0.01174,0.00927,0.01156,0.00963,0.01201,0.00990,0.01092,0.01093,0.01152,0.01055,0.01015,0.01012,0.00991,0.00986,0.00946,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.13263,0.02946,0.02387,0.02060,0.02081,0.02098,0.02384,0.02923,0.02335,0.03637,0.02470,0.02777,0.02823,0.02916,0.02871,0.02928,0.02043,0.02342,0.02143,0.02128,0.01571,0.01549,0.01284,0.01092,0.01111,0.00994,0.00934,0.00913,0.00889,0.00941,0.00847,0.00842,0.00825,0.00845,0.00798,0.01004,0.00940,0.00862,0.00903,0.00884,0.00953,0.00914,0.00943,0.00922,0.00974,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.20000,0.20000,0.71770,0.35005,0.25746,0.23581,0.20000,0.20000,0.20000,0.20060,0.20000,0.20000,0.20000,0.28215,0.20000,0.20000,0.29209,0.20000,0.23471,0.20000,0.23445,0.21552,0.28860,0.20000,0.22193,0.20000,0.22037,0.21004,0.20280,0.26840,0.20000,0.22616,0.20000,0.24061,0.20000,0.26866,0.20000,0.20000,0.20000,0.25034,0.22439,0.26118,0.24923,0.34061,0.69689,0.55980,0.23310,0.25554,0.00000,0.12491,1.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.2,0.56347663,0.546232461,0.277994804,0.207079346,0.248377574,0.2,0.2,0.232748817,0.2,0.224655945,0.2,0.2,0.2,0.2,0.2,0.20392432,0.2,0.2,0.2,0.210914705,0.2,0.265355613,0.200561729,0.2,0.232141322,0.2,0.215524671,0.264628087,0.2,0.208071037,0.22077724,0.250837788,0.2,0.212940802,0.2,0.2,0.20027967,0.2,0.223477638,0.2,0.2,0.260038155,0.251876772,0.657291934,0.454819524,0.428913696,0.287380262,0.140803001,0.054164949,1,0,0])
        elif self.year==2019:
            miehet_in=np.array([0.29055,0.12112,0.05709,0.02379,0.01984,0.01845,0.01633,0.01544,0.01711,0.01463,0.01567,0.01397,0.01462,0.01374,0.01338,0.01450,0.01284,0.01245,0.01185,0.01177,0.01189,0.01122,0.01085,0.01048,0.00985,0.01169,0.01002,0.01080,0.01000,0.00998,0.00963,0.01095,0.01011,0.00988,0.01083,0.01339,0.01059,0.01170,0.01097,0.01072,0.01068,0.01078,0.01865,0.01909,0.01518,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.11303,0.02776,0.02291,0.01988,0.02194,0.02069,0.02057,0.02454,0.02551,0.03222,0.02768,0.02971,0.03085,0.03266,0.03117,0.03313,0.02264,0.03046,0.01998,0.02202,0.01744,0.01529,0.01360,0.01245,0.01088,0.01065,0.00955,0.00922,0.00908,0.00888,0.00840,0.00839,0.00890,0.00844,0.00818,0.01205,0.01011,0.00927,0.01116,0.00946,0.00950,0.01096,0.01427,0.00423,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.20000,0.20000,0.70153,0.34733,0.22570,0.25019,0.21085,0.20000,0.20000,0.23250,0.20000,0.23945,0.20000,0.20000,0.26468,0.20000,0.22761,0.24164,0.20204,0.25930,0.20000,0.23102,0.23381,0.28585,0.20000,0.20000,0.23130,0.20000,0.20041,0.23817,0.22328,0.20000,0.20000,0.25365,0.20000,0.20000,0.25743,0.20000,0.20000,0.22230,0.21130,0.26775,0.20000,0.20000,0.59939,0.68643,0.38026,0.36801,0.00000,0.00000,1.00000,0.17952,0.00000])
            naiset_ulos=np.array([0.2,0.571660592,0.554172508,0.305118456,0.2,0.226553371,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.212922425,0.2,0.242744811,0.2,0.2,0.210916671,0.206361453,0.244156118,0.276672595,0.2,0.217634887,0.207516137,0.212796882,0.251820084,0.201383325,0.212092106,0.2,0.233405769,0.206823686,0.2,0.2,0.247006557,0.2,0.205586381,0.212948785,0.2,0.2,0,0.336137753,0.641355089,0.386395344,0.45728608,0,0.11241412,1,0,0])
        elif self.year==2020:
            miehet_in=np.array([0.29055,0.12112,0.05709,0.02379,0.01984,0.01845,0.01633,0.01544,0.01711,0.01463,0.01567,0.01397,0.01462,0.01374,0.01338,0.01450,0.01284,0.01245,0.01185,0.01177,0.01189,0.01122,0.01085,0.01048,0.00985,0.01169,0.01002,0.01080,0.01000,0.00998,0.00963,0.01095,0.01011,0.00988,0.01083,0.01339,0.01059,0.01170,0.01097,0.01072,0.01068,0.01078,0.01865,0.01909,0.01518,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.11303,0.02776,0.02291,0.01988,0.02194,0.02069,0.02057,0.02454,0.02551,0.03222,0.02768,0.02971,0.03085,0.03266,0.03117,0.03313,0.02264,0.03046,0.01998,0.02202,0.01744,0.01529,0.01360,0.01245,0.01088,0.01065,0.00955,0.00922,0.00908,0.00888,0.00840,0.00839,0.00890,0.00844,0.00818,0.01205,0.01011,0.00927,0.01116,0.00946,0.00950,0.01096,0.01427,0.00423,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.20000,0.20000,0.70153,0.34733,0.22570,0.25019,0.21085,0.20000,0.20000,0.23250,0.20000,0.23945,0.20000,0.20000,0.26468,0.20000,0.22761,0.24164,0.20204,0.25930,0.20000,0.23102,0.23381,0.28585,0.20000,0.20000,0.23130,0.20000,0.20041,0.23817,0.22328,0.20000,0.20000,0.25365,0.20000,0.20000,0.25743,0.20000,0.20000,0.22230,0.21130,0.26775,0.20000,0.20000,0.59939,0.68643,0.38026,0.36801,0.00000,0.00000,1.00000,0.17952,0.00000])
            naiset_ulos=np.array([0.2,0.571660592,0.554172508,0.305118456,0.2,0.226553371,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.212922425,0.2,0.242744811,0.2,0.2,0.210916671,0.206361453,0.244156118,0.276672595,0.2,0.217634887,0.207516137,0.212796882,0.251820084,0.201383325,0.212092106,0.2,0.233405769,0.206823686,0.2,0.2,0.247006557,0.2,0.205586381,0.212948785,0.2,0.2,0,0.336137753,0.641355089,0.386395344,0.45728608,0,0.11241412,1,0,0])
        elif self.year==2021:
            miehet_in=np.array([0.29055,0.12112,0.05709,0.02379,0.01984,0.01845,0.01633,0.01544,0.01711,0.01463,0.01567,0.01397,0.01462,0.01374,0.01338,0.01450,0.01284,0.01245,0.01185,0.01177,0.01189,0.01122,0.01085,0.01048,0.00985,0.01169,0.01002,0.01080,0.01000,0.00998,0.00963,0.01095,0.01011,0.00988,0.01083,0.01339,0.01059,0.01170,0.01097,0.01072,0.01068,0.01078,0.01865,0.01909,0.01518,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.11303,0.02776,0.02291,0.01988,0.02194,0.02069,0.02057,0.02454,0.02551,0.03222,0.02768,0.02971,0.03085,0.03266,0.03117,0.03313,0.02264,0.03046,0.01998,0.02202,0.01744,0.01529,0.01360,0.01245,0.01088,0.01065,0.00955,0.00922,0.00908,0.00888,0.00840,0.00839,0.00890,0.00844,0.00818,0.01205,0.01011,0.00927,0.01116,0.00946,0.00950,0.01096,0.01427,0.00423,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.20000,0.20000,0.70153,0.34733,0.22570,0.25019,0.21085,0.20000,0.20000,0.23250,0.20000,0.23945,0.20000,0.20000,0.26468,0.20000,0.22761,0.24164,0.20204,0.25930,0.20000,0.23102,0.23381,0.28585,0.20000,0.20000,0.23130,0.20000,0.20041,0.23817,0.22328,0.20000,0.20000,0.25365,0.20000,0.20000,0.25743,0.20000,0.20000,0.22230,0.21130,0.26775,0.20000,0.20000,0.59939,0.68643,0.38026,0.36801,0.00000,0.00000,1.00000,0.17952,0.00000])
            naiset_ulos=np.array([0.2,0.571660592,0.554172508,0.305118456,0.2,0.226553371,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.212922425,0.2,0.242744811,0.2,0.2,0.210916671,0.206361453,0.244156118,0.276672595,0.2,0.217634887,0.207516137,0.212796882,0.251820084,0.201383325,0.212092106,0.2,0.233405769,0.206823686,0.2,0.2,0.247006557,0.2,0.205586381,0.212948785,0.2,0.2,0,0.336137753,0.641355089,0.386395344,0.45728608,0,0.11241412,1,0,0])
        else:
            error(990)
        
#         def get_wees(w0,w1,intensity):
#             return w0*intensity,w1*intensity,get_w(w0,w1)*intensity
#         
#         def get_w(a0,a1):
#             return (1-a0*group_weights[0]-a1*group_weights[1])/group_weights[2]
#         
#         um1,um2,um3=get_wees(2,0.7,1.0)
#         uw1,uw2,uw3=get_wees(2,0.7,1.0)
        
        min_age=18
        max_spv=71
        inrate[min_age:max_spv,0]=miehet_in
        inrate[min_age:max_spv,1]=miehet_in
        inrate[min_age:max_spv,2]=miehet_in
        inrate[min_age:max_spv,3]=naiset_in
        inrate[min_age:max_spv,4]=naiset_in
        inrate[min_age:max_spv,5]=naiset_in
        outrate[min_age:max_spv,0]=miehet_ulos
        outrate[min_age:max_spv,1]=miehet_ulos
        outrate[min_age:max_spv,2]=miehet_ulos
        outrate[min_age:max_spv,3]=naiset_ulos
        outrate[min_age:max_spv,4]=naiset_ulos
        outrate[min_age:max_spv,5]=naiset_ulos
        
        inrate=inrate*self.timestep
        #outrate=outsider_outrate*self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate

#     def get_army_rate(self,debug=False):
#         '''
#         armeija intensiteetit eri ryhmille
#         '''
#         outrate=np.zeros((101,self.n_groups))
#         miehet_ulos=0*np.array([0.826082957,0.593698994,0.366283368,0.43758429,0.219910436,0.367689675,0.111588214,0.234498521,0.5,0.96438943,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
#         naiset_ulos=0*np.array([0.506854911,0.619103706,0.181591468,0.518294319,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
#         outrate[20:70,0]=miehet_ulos
#         outrate[20:70,1]=miehet_ulos
#         outrate[20:70,2]=miehet_ulos
#         outrate[20:70,3]=naiset_ulos
#         outrate[20:70,4]=naiset_ulos
#         outrate[20:70,5]=naiset_ulos
# 
#         #inrate=inrate*self.timestep
#         #outrate=outrate*self.timestep
#         outrate=1-(1-outrate)**self.timestep
# 
#         return outrate
        
    def get_disability_rate(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Data ETK:n tilastotietokannasta ja skaalattu ikäluokittaisillä miesten ja naisten määrillä
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.2,0.8,0.4,1.1,0.8,0.5])*0.9
        
        dis_miehet=np.array([0.004697942,00.004697942,00.004697942,0.004435302,0.003631736,0.003141361,0.003457091,0.003005607,0.002905609,0.003029283,0.002289213,0.002137714,0.001854558,0.002813517,0.002607335,0.00292628,0.002937462,0.002784612,0.002846377,0.002776506,0.003017675,0.003129845,0.003349059,0.002991577,0.00305634,0.003446143,0.003633971,0.004045113,0.004002001,0.004517725,0.005527525,0.005565513,0.006319492,0.007399175,0.00731299,0.009142823,0.010254463,0.011784364,0.013783743,0.015299156,0.018282001,0.024051257,0.032338044,0.028290544,0.019444444,0.00454486,0.000330718,0,0,0,0,0,0])
        dis_naiset=np.array([0.00532654,0.00532654,0.00532654,0.004917401,0.00453191,0.003799551,0.003253733,0.003092307,0.002822592,0.003309772,0.002482279,0.002615887,0.002416545,0.003546203,0.002665276,0.003095104,0.003129633,0.003406418,0.003171677,0.003320357,0.003391292,0.004007371,0.004310094,0.00438571,0.004267343,0.004889399,0.005043702,0.005793425,0.005569451,0.006298434,0.006363081,0.007043361,0.009389811,0.007457667,0.009251373,0.011154836,0.009524088,0.013689796,0.014658423,0.017440417,0.022804727,0.02677838,0.037438459,0.034691279,0.022649573,0.004414073,0.000264568,0,0,0,0,0,0])
        # ei varhaiseläkkeitä mukana, joten oletetaan ettei tk-intensiteetti laske
        dis_miehet[41:51]=np.maximum(dis_miehet[41:51],0.02829054)
        dis_naiset[41:51]=np.maximum(dis_naiset[41:51],0.03469128)
        
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis_miehet
            disab[70:(self.max_age+1),g]=24.45*dfactor[g]/1000
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis_naiset
            disab[70:(self.max_age+1),g]=24.45*dfactor[g]/1000

        #disab=disab*self.timestep
        
        disab=1-(1-disab)**self.timestep

        return disab        
        
    def get_eff_disab_rate(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.95,0.6,1.2,1.0,0.9])
            
        if self.year==2018:
            dis_miehet=np.array([0.003844207,0.003844207,0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.003152456,0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2019:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2020:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2021:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        else:
            error(999)
            
        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        y=np.arange(53-41)*0.007
        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]+y

        y=np.arange(53-41)*0.007
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]+y
            
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis2_miehet
            disab[70:(self.max_age+1),g]=disab[70,g]
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis2_naiset
            disab[70:(self.max_age+1),g]=disab[70,g]
            
        disab=1-(1-disab)**self.timestep

        return disab        

        
    def get_eff_disab_rate_v2(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        Revisio 2021
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.95,0.6,1.2,1.0,0.9])
            
        print(f'disability rate from year {self.year}')
        
        if self.year==2018:
            #dis_miehet=np.array([0.008321456,0.002993752,0.004146542,0.003870784,0.003220185,0.002487096,0.002229324,0.00244582,0.001186435,0.001674951,0.000555309,0.001398849,0.001105777,0.001341472,0.00118139,0.001215311,0.001382284,0.000497833,0.000826567,0.001008965,0.001129724,0.001259374,0.001701857,0.001444206,0.001625143,0.001581916,0.001722034,0.002064003,0.002657093,0.002826383,0.002246247,0.002692896,0.002935778,0.003657853,0.00424551,0.005254346,0.005786324,0.007335632,0.00808196,0.00867219,0.014069164,0.017917325,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628])
            dis_miehet=np.array([0.003858814,0.00534045,0.004931281,0.004086225,0.003183827,0.002809285,0.003086115,0.001467815,0.002115765,0.000693209,0.001708465,0.001465953,0.001709903,0.001543263,0.001598405,0.001774083,0.0006551,0.001140253,0.001311589,0.001485912,0.001634985,0.002185966,0.001865917,0.002074429,0.002015784,0.002170306,0.002609817,0.003306315,0.003570692,0.002807956,0.003309782,0.00363932,0.00447494,0.005161421,0.006328875,0.006852798,0.008752666,0.0097163,0.010337497,0.016257937,0.020137396,0.030938732,0.032847388,0.027286788,0.027999791,0.025212424,0.025003888,0.025003888,0.025003888,0.025003888,0.025003888,0.025003888,0.025003888])
            # dis_naiset=np.array([0.007015152,0.003257260,0.004579721,0.004286953,0.002528637,0.001999147,0.001384447,0.000996534,0.000465366,0.00170409,0.000550695,0.000419271,0.001033873,0.000981155,0.000206011,0.000886433,0.00051823,0.00144632,0.001571033,0.001487139,0.002013841,0.001739962,0.002200103,0.001763907,0.002805184,0.002178202,0.00279571,0.002294313,0.002520653,0.002977461,0.002867963,0.002511064,0.004497063,0.00439934,0.004868397,0.004838447,0.005866743,0.007599475,0.00947594,0.011210606,0.015328827,0.018958944,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663])
            dis_naiset=np.array([0.007065701,0.003310324,0.004646763,0.004353522,0.002567590,0.002034282,0.001407660,0.001014073,0.000474005,0.001736713,0.000560955,0.000426898,0.001052445,0.001001274,0.000210206,0.000904584,0.000529817,0.001478165,0.001608721,0.001521320,0.002061652,0.001783814,0.002258639,0.001811389,0.002884719,0.002242913,0.002885162,0.002376702,0.002614826,0.003095596,0.002990745,0.002627636,0.004721602,0.004639082,0.005155216,0.005135104,0.006256667,0.008140032,0.010277631,0.012252737,0.017011354,0.021376006,0.035004261,0.036475894,0.040552287,0.042687012,0.058706029,0.032348674,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663])
        elif self.year==2019:
            dis_miehet=np.array([0.008321456,0.002993752,0.004146542,0.003870784,0.003220185,0.002487096,0.002229324,0.00244582,0.001186435,0.001674951,0.000555309,0.001398849,0.001105777,0.001341472,0.00118139,0.001215311,0.001382284,0.000497833,0.000826567,0.001008965,0.001129724,0.001259374,0.001701857,0.001444206,0.001625143,0.001581916,0.001722034,0.002064003,0.002657093,0.002826383,0.002246247,0.002692896,0.002935778,0.003657853,0.00424551,0.005254346,0.005786324,0.007335632,0.00808196,0.00867219,0.014069164,0.017917325,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628])
            dis_naiset=np.array([0.007015152,0.003257260,0.004579721,0.004286953,0.002528637,0.001999147,0.001384447,0.000996534,0.000465366,0.00170409,0.000550695,0.000419271,0.001033873,0.000981155,0.000206011,0.000886433,0.00051823,0.00144632,0.001571033,0.001487139,0.002013841,0.001739962,0.002200103,0.001763907,0.002805184,0.002178202,0.00279571,0.002294313,0.002520653,0.002977461,0.002867963,0.002511064,0.004497063,0.00439934,0.004868397,0.004838447,0.005866743,0.007599475,0.00947594,0.011210606,0.015328827,0.018958944,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663])
        elif self.year==2020:
            dis_miehet=np.array([0.008321456,0.002993752,0.004146542,0.003870784,0.003220185,0.002487096,0.002229324,0.00244582,0.001186435,0.001674951,0.000555309,0.001398849,0.001105777,0.001341472,0.00118139,0.001215311,0.001382284,0.000497833,0.000826567,0.001008965,0.001129724,0.001259374,0.001701857,0.001444206,0.001625143,0.001581916,0.001722034,0.002064003,0.002657093,0.002826383,0.002246247,0.002692896,0.002935778,0.003657853,0.00424551,0.005254346,0.005786324,0.007335632,0.00808196,0.00867219,0.014069164,0.017917325,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628])
            dis_naiset=np.array([0.007015152,0.003257260,0.004579721,0.004286953,0.002528637,0.001999147,0.001384447,0.000996534,0.000465366,0.00170409,0.000550695,0.000419271,0.001033873,0.000981155,0.000206011,0.000886433,0.00051823,0.00144632,0.001571033,0.001487139,0.002013841,0.001739962,0.002200103,0.001763907,0.002805184,0.002178202,0.00279571,0.002294313,0.002520653,0.002977461,0.002867963,0.002511064,0.004497063,0.00439934,0.004868397,0.004838447,0.005866743,0.007599475,0.00947594,0.011210606,0.015328827,0.018958944,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663])
        elif self.year==2021:
            dis_miehet=np.array([0.008321456,0.002993752,0.004146542,0.003870784,0.003220185,0.002487096,0.002229324,0.00244582,0.001186435,0.001674951,0.000555309,0.001398849,0.001105777,0.001341472,0.00118139,0.001215311,0.001382284,0.000497833,0.000826567,0.001008965,0.001129724,0.001259374,0.001701857,0.001444206,0.001625143,0.001581916,0.001722034,0.002064003,0.002657093,0.002826383,0.002246247,0.002692896,0.002935778,0.003657853,0.00424551,0.005254346,0.005786324,0.007335632,0.00808196,0.00867219,0.014069164,0.017917325,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628,0.028833628])
            dis_naiset=np.array([0.007015152,0.003257260,0.004579721,0.004286953,0.002528637,0.001999147,0.001384447,0.000996534,0.000465366,0.00170409,0.000550695,0.000419271,0.001033873,0.000981155,0.000206011,0.000886433,0.00051823,0.00144632,0.001571033,0.001487139,0.002013841,0.001739962,0.002200103,0.001763907,0.002805184,0.002178202,0.00279571,0.002294313,0.002520653,0.002977461,0.002867963,0.002511064,0.004497063,0.00439934,0.004868397,0.004838447,0.005866743,0.007599475,0.00947594,0.011210606,0.015328827,0.018958944,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663,0.029875663])
        else:
            error(999)
            
        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        y=np.arange(53-41)*0.007
        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]+y

        y=np.arange(53-41)*0.007
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]+y
            
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis2_miehet
            disab[71:(self.max_age+1),g]=disab[70,g]
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis2_naiset
            disab[71:(self.max_age+1),g]=disab[70,g]
            
        disab=1-(1-disab)**self.timestep

        return disab        


    def get_eff_disab_rate_exp(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.95,0.6,1.2,1.0,0.9])

        dis_miehet=np.array([0.003844207,0.003844207,0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711])
        dis_naiset=np.array([0.003152456,0.003152456,0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])

        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        y=np.exp(np.arange(53-41)*0.185)
        #y=np.arange(53-41)*0.057

        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]*y

        #y=np.arange(53-41)*0.017
        y=np.exp(np.arange(53-41)*0.160)
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]*y

        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis2_miehet
            disab[70:(self.max_age+1),g]=disab[70,g]
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis2_naiset
            disab[70:(self.max_age+1),g]=disab[70,g]

        #timestep=0.25
        disab=1-(1-disab)**self.timestep

        return disab        

    def get_birth_rate(self,debug=False):
        '''
        Syntyvyysdata
        '''
        birth=np.zeros((self.max_age+1,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([0.75,1.0,1.25,0.5,1.0,1.5])
        for g in range(self.n_groups):
            factor=dfactor[g] # tämä vaikeuttaa sovitetta
            birth[15,g]=0.000177167*factor
            birth[16,g]=0.001049171*factor
            birth[17,g]=0.002303504*factor
            birth[18,g]=0.00630474*factor
            birth[19,g]=0.014399394*factor
            birth[20,g]=0.023042239*factor
            birth[21,g]=0.03088312*factor
            birth[22,g]=0.039755923*factor
            birth[23,g]=0.047483352*factor
            birth[24,g]=0.055630287*factor
            birth[25,g]=0.067942889*factor
            birth[26,g]=0.077108925*factor
            birth[27,g]=0.085396679*factor
            birth[28,g]=0.096968809*factor
            birth[29,g]=0.10081728*factor
            birth[30,g]=0.105586061*factor
            birth[31,g]=0.1124004*factor
            birth[32,g]=0.102667839*factor
            birth[33,g]=0.098528489*factor
            birth[34,g]=0.084080311*factor
            birth[35,g]=0.072335459*factor
            birth[36,g]=0.065203338*factor
            birth[37,g]=0.053073374*factor
            birth[38,g]=0.044054569*factor
            birth[39,g]=0.032984136*factor
            birth[40,g]=0.024135797*factor
            birth[41,g]=0.0174215*factor
            birth[42,g]=0.011621238*factor
            birth[43,g]=0.006909705*factor
            birth[44,g]=0.003977037*factor
            birth[45,g]=0.002171444*factor
            birth[46,g]=0.00115119*factor
            birth[47,g]=0.000712692*factor
            birth[48,g]=9.16478E-05*factor
            birth[49,g]=0.000113167*factor

        # syntyvyys on lasten määrä suhteessa naisten määrään
        # ei siis tarvetta kertoa kahdella, vaikka isät pääsevät isyysvapaalle

        birth=1-(1-birth)**self.timestep

        return birth
        
    def get_birth_rate_v2(self,debug=False):
        '''
        Syntyvyysdata
        Päivitetty 13.10.2021
        '''
        birth=np.zeros((self.max_age+1,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([0.75,1.0,1.25,0.5,1.0,1.5])
            
        birth=np.zeros((6,100))
        if self.year==2018:
            bdata=np.array([0.00569959,0.011937244,0.020951263,0.028827696,0.034751037,0.043394825,0.051886089,0.064069418,0.072356108,0.08,0.090506401,0.096027745,0.100822746,0.103865916,0.098191371,0.088888239,0.082899639,0.072963407,0.061780343,0.051564837,0.042105888,0.033690476,0.024182459,0.016327851,0.011475651,0.006451613,0.003594199,0.001798997,0.000968863,0.000512246,0.000217216,0.000122298,8.5022E-05,5.54493E-05,5.50858E-05,2.74183E-05,0])
        elif self.year==2019:
            bdata=np.array([0.005106294,0.01251173,0.017809014,0.026994415,0.032204898,0.043130066,0.048894492,0.057542032,0.069026601,0.074917822,0.084601199,0.091066413,0.096168316,0.097412349,0.094562935,0.087455326,0.082835408,0.073790916,0.063865266,0.048179811,0.03848964,0.031461604,0.023676012,0.016556785,0.010069873,0.006201687,0.004392827,0.002779339,0.001313062,0.000600901,0.00032001,6.20636E-05,9.18189E-05,0,0,0,0])
        elif self.year==2020:
            bdata=np.array([0.005106294,0.01251173,0.017809014,0.026994415,0.032204898,0.043130066,0.048894492,0.057542032,0.069026601,0.074917822,0.084601199,0.091066413,0.096168316,0.097412349,0.094562935,0.087455326,0.082835408,0.073790916,0.063865266,0.048179811,0.03848964,0.031461604,0.023676012,0.016556785,0.010069873,0.006201687,0.004392827,0.002779339,0.001313062,0.000600901,0.00032001,6.20636E-05,9.18189E-05,0,0,0,0])
        elif self.year==2021:
            bdata=np.array([0.005106294,0.01251173,0.017809014,0.026994415,0.032204898,0.043130066,0.048894492,0.057542032,0.069026601,0.074917822,0.084601199,0.091066413,0.096168316,0.097412349,0.094562935,0.087455326,0.082835408,0.073790916,0.063865266,0.048179811,0.03848964,0.031461604,0.023676012,0.016556785,0.010069873,0.006201687,0.004392827,0.002779339,0.001313062,0.000600901,0.00032001,6.20636E-05,9.18189E-05,0,0,0,0])

        for g in range(self.n_groups):
            factor=dfactor[g] # tämä vaikeuttaa sovitetta
            birth[18:55,g]=bdata*factor

        # syntyvyys on lasten määrä suhteessa naisten määrään
        # ei siis tarvetta kertoa kahdella, vaikka isät pääsevät isyysvapaalle

        birth=1-(1-birth)**self.timestep

        return birth        
        
    def get_pinkslip_rate(self):
        pinkslip_intensity=np.zeros(6)
        if False:
            pinkslip_intensity[0:3]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[3:6]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
        else:
            pinkslip_intensity[0]=0.07 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[1]=0.04 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[2]=0.02 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[3]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
            pinkslip_intensity[4]=0.04 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
            pinkslip_intensity[5]=0.02 # todennäköisyys tulla irtisanotuksi vuodessa, naiset

        return pinkslip_intensity
        
    def map_5year(self,mar):
        arr=np.zeros(self.max_age+2)
        mins=np.array([15,20,25,30,35,40,45,50,55,60,65,70])
        maxs=np.array([20,25,30,35,40,45,50,55,60,65,70,75])
        for i,mini in enumerate(mins):
            for age in range(mini,maxs[i]):
                if age>=self.min_age and age<self.max_age:
                    arr[age]=mar[i]
                    
        return arr
        
    def get_marriage_rate(self):
        #if self.year==2018:
        mar_miehet=self.map_5year(np.array([0.9,8.9,31.0,40.5,32.4,25.6,26.9,15.1,11.3,7.2,4.1,2.0])/1000.0)
        mar_naiset=self.map_5year(np.array([2.4,16.6,45.3,46.6,33.4,25.8,27.9,11.2,7.5,4.2,2.4,0.5])/1000.0)
        # avoliitot, arvio
        mar_miehet+=self.map_5year(np.array([20.0,20.0,10.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0])/1000.0)
        mar_naiset+=self.map_5year(np.array([20.0,20.0,10.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0])/1000.0)

        marriage_rate=np.zeros((2,self.max_age+2))
        marriage_rate[0]=mar_miehet
        marriage_rate[1]=mar_naiset
        
        return marriage_rate*self.timestep
        
    def get_divorce_rate(self):
        #if self.year==2018:
        mar_miehet=self.map_5year(np.array([0.9,8.9,31.0,40.5,32.4,25.6,26.9,15.1,11.3,7.2,4.1,2.0])/1000.0)
        mar_naiset=self.map_5year(np.array([2.4,16.6,45.3,46.6,33.4,25.8,27.9,11.2,7.5,4.2,2.4,0.5])/1000.0)
        # avoliitot, arvio, 50% avoliitto-intensiteetistä
        mar_miehet+=self.map_5year(np.array([20.0,20.0,10.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0])/1000.0)*0.5
        mar_naiset+=self.map_5year(np.array([20.0,20.0,10.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0])/1000.0)*0.5

        divorce_rate=np.zeros((2,self.max_age+2))
        divorce_rate[0,:]=mar_miehet
        divorce_rate[1,:]=mar_naiset
        
        return divorce_rate*self.timestep

    def setup_salaries_v3(self,min_retirementage):
        # TK:n aineisto vuodelta 2018
        # iät 18-70
        
        if self.year==2018:
            palkat_ika_miehet=12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        elif self.year==2019:
            ind=1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2020:
            ind=1.019*1.013
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=ind*12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=ind*12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2021:
            ind=1.019*1.013*1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=ind*12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=ind*12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        else:
            print('Unknown year ',self.year)
            error(1001)
            
        def map_age18(x):
            return int(x-18)
            
        def ifunc(palkat,x1,x2):
            x = np.linspace(18, 72, num=54, endpoint=True)
            f = interp1d(x, palkat)
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
        
            return f(palkat_x)        

        def gfunc(palkat,x1,x2):
            x = np.linspace(18, 73, num=55, endpoint=True)
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
            g=np.zeros((n_time,3))
            for k in range(3):
                f = interp1d(x, palkat[:,k])
                g[:,k]=f(palkat_x)
        
            return g
        
        # filtteri
        m_age=int(min_retirementage-1)
        palkat_miehet_ve=palkat_ika_miehet[map_age18(m_age)]
        palkat_ika_miehet[map_age18(m_age):]=np.minimum(palkat_ika_miehet[map_age18(m_age):],palkat_miehet_ve)
        palkat_naiset_ve=palkat_ika_naiset[map_age18(m_age)]
        palkat_ika_naiset[map_age18(m_age):]=np.minimum(palkat_ika_naiset[map_age18(m_age):],palkat_naiset_ve)

        palkat_ika_miehet=ifunc(palkat_ika_miehet,self.min_age,self.max_age)
        palkat_ika_naiset=ifunc(palkat_ika_naiset,self.min_age,self.max_age)
        
        g_r=np.array([[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.8144725,1.011105,1.2677425],[0.814585,1.01229,1.288585],[0.8146975,1.013475,1.3094275],[0.81481,1.01466,1.33027],[0.81481,1.01466,1.33027],[0.798635,1.0116225,1.34756],[0.78246,1.008585,1.36485],[0.766285,1.0055475,1.38214],[0.75011,1.00251,1.39943],[0.75011,1.00251,1.39943],[0.74420478,0.99822499,1.40395702],[0.73829957,0.99393997,1.40848403],[0.73239435,0.98965496,1.41301105],[0.72648913,0.98536995,1.41753806],[0.72058391,0.98108493,1.42206508],[0.7146787,0.97679992,1.4265921],[0.70877348,0.9725149,1.43111911],[0.70286826,0.96822989,1.43564613],[0.69696304,0.96394488,1.44017314],[0.69105783,0.95965986,1.44470016],[0.68515261,0.95537485,1.44922718],[0.67924739,0.95108984,1.45375419],[0.67334218,0.94680482,1.45828121],[0.66743696,0.94251981,1.46280822],[0.66153174,0.93823479,1.46733524],[0.65562652,0.93394978,1.47186226],[0.64972131,0.92966477,1.47638927],[0.64381609,0.92537975,1.48091629],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433]])
        g_r=gfunc(g_r,self.min_age,self.max_age)
        
        return palkat_ika_miehet,palkat_ika_naiset,g_r
        
    def infostat_kassanjasenyys_rate(self):
        rate_age=np.array([18,30,40,50,60,74])
        #rate_obs=np.array([0.429,0.836,0.917,0.946,0.933,0.933])
        rate_obs=np.array([0.20,0.836,0.917,0.946,0.933,0.933])
        initial_kassanjasenia=rate_obs[0]
        
        x1=self.min_age
        x2=self.max_age+1
        f = interp1d(rate_age, rate_obs)
        n_time = int(np.round((x2-x1)*self.inv_timestep))+2
        jasenyys_x = np.linspace(x1, x2, num=n_time, endpoint=True)

        rate=f(jasenyys_x)
        kassanjasenyys_joinrate=rate*0
        for k in range(0,rate.shape[0]-1):
            kassanjasenyys_joinrate[k+1]=(rate[k+1]-rate[k])/(1-rate[k]) #*self.timestep
        
        kassanjasenyys_rate=rate
            
        return kassanjasenyys_joinrate,kassanjasenyys_rate
        
            