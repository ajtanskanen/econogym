'''

    rates.py

    rates for moving agents from state to another

'''

import numpy as np
from scipy.interpolate import interp1d

class Rates():
    def __init__(self,year=2018,silent=True,max_age=70,n_groups=6,timestep=0.25,min_age=18,inv_timestep=0,n_empl=14):
        self.year=year
        self.max_age=max_age
        self.min_age=min_age
        self.n_groups=n_groups
        self.timestep=timestep
        self.inv_timestep=inv_timestep
        self.silent=silent
        self.n_empl=n_empl
        
        self.group_weights=np.zeros(3)
        self.group_weights=[0.3,0.5,0.2]

    def get_wees(self,w0,w1,intensity):
        '''
        Säätää kolmannen ryhmän intensiteetin niin että kaikkien kolmen ryhmän painot ovat 1.0
        '''
        return w0*intensity,w1*intensity,self.get_w(w0,w1)*intensity
    
    def get_w(self,a0,a1):
        return (1-a0*self.group_weights[0]-a1*self.group_weights[1])/self.group_weights[2]
        
    def get_mort_rate(self,debug=False):
        '''
        Kuolleisuus-intensiteetit eri ryhmille
        '''
        mort=np.zeros((101,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([1.3,1.0,0.78,1.15,1.0,0.8])
        # tilastokeskuksen kuolleisuusdata 2017 sukupuolittain
        mort[:,1]=np.array([2.12,0.32,0.17,0.07,0.07,0.10,0.00,0.09,0.03,0.13,0.03,0.07,0.10,0.10,0.10,0.23,0.50,0.52,0.42,0.87,0.79,0.66,0.71,0.69,0.98,0.80,0.77,1.07,0.97,0.76,0.83,1.03,0.98,1.20,1.03,0.76,1.22,1.29,1.10,1.26,1.37,1.43,1.71,2.32,2.22,1.89,2.05,2.15,2.71,2.96,3.52,3.54,4.30,4.34,5.09,4.75,6.17,5.88,6.67,8.00,9.20,10.52,10.30,12.26,12.74,13.22,15.03,17.24,18.14,17.78,20.35,25.57,23.53,26.50,28.57,31.87,34.65,40.88,42.43,52.28,59.26,62.92,68.86,72.70,94.04,99.88,113.11,128.52,147.96,161.89,175.99,199.39,212.52,248.32,260.47,284.01,319.98,349.28,301.37,370.17,370.17])/1000.0
        mort[:,0]=dfactor[0]*mort[:,1]
        mort[:,2]=dfactor[2]*mort[:,1]
        mort[:,4]=np.array([1.89,0.30,0.11,0.03,0.14,0.03,0.16,0.07,0.13,0.03,0.00,0.07,0.07,0.07,0.18,0.14,0.07,0.31,0.31,0.30,0.33,0.26,0.18,0.33,0.56,0.17,0.32,0.29,0.35,0.24,0.55,0.35,0.23,0.39,0.48,0.38,0.35,0.80,0.42,0.65,0.50,0.68,0.80,1.12,0.99,0.88,1.13,1.01,1.07,1.68,1.79,2.16,1.87,2.32,2.67,2.69,2.88,2.86,3.73,4.19,3.66,4.97,5.20,5.52,6.05,7.17,7.48,7.32,8.88,10.33,10.72,12.77,12.13,13.30,16.18,18.30,17.50,24.63,26.53,29.88,32.65,38.88,46.95,51.30,60.00,64.73,79.35,90.94,105.11,118.46,141.44,155.07,163.11,198.45,207.92,237.21,254.75,311.31,299.59,356.64,356.64])/1000.0
        mort[:,3]=dfactor[3]*mort[:,4]
        mort[:,5]=dfactor[5]*mort[:,4]
        
        mort=1-(1-mort)**self.timestep

        return mort

    def get_mort_rate_1980(self,debug=False):
        '''
        Kuolleisuus-intensiteetit eri ryhmille
        '''
        mort=np.zeros((111,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
            dfactor=np.array([1.3,1.0,0.8,1.15,1.0,0.85])
            
        # ETK:sta saatu 1980-luvulla syntyneiden kuolleisuus
        mort[:,1]=np.array([0.00212,0.00032,0.00017,0.00007,0.00007,0.00087,0.000955,0.001285,0.001025,0.001145,0.001215,0.00121,0.00127,0.001195,0.001075,0.00087,0.000922918,0.001110727,0.001282406,0.001139091,0.001116819,0.001296377,0.001214769,0.001472221,0.001499108,0.001633651,0.001885631,0.001788105,0.001846841,0.002097677,0.002221515,0.002421873,0.0027286,0.002917021,0.002914952,0.003141551,0.003421786,0.003739702,0.003865086,0.004478511,0.004500349,0.005024217,0.005204155,0.005590178,0.006185707,0.006493172,0.006431219,0.006586458,0.006987948,0.007511778,0.007798334,0.007943255,0.008656053,0.009215786,0.010144656,0.011131939,0.011644146,0.012906354,0.014844232,0.01649505,0.018757944,0.0217792,0.024105325,0.028190449,0.034549837,0.039611964,0.047004774,0.058700039,0.070188116,0.084493879,0.099945389,0.123643555,0.142760694,0.164092641,0.197935225,0.216982235,0.265127613,0.280274881,0.275028974,0.287887892,0.35428496,0.392993994,0.432764875,0.465257645,0.492725928,0.537519397,0.628697246,0.722197558,0.818099442,0.913452665,1])
        mort[:,0]=dfactor[0]*mort[:,1]
        mort[:,2]=dfactor[2]*mort[:,1]
        mort[:,4]=np.array([0.00189,0.00030,0.00011,0.00003,0.00014,0.000325,0.00031,0.00039,0.000325,0.0004,0.00027,0.000415,0.00036,0.000345,0.00048,0.000495,0.000468017,0.00047721,0.000515887,0.00039946,0.000558615,0.000542183,0.000638361,0.000627876,0.000656854,0.000734585,0.000829,0.00091037,0.000973696,0.001008048,0.001298423,0.001476736,0.001516427,0.001625692,0.00156296,0.001933662,0.00204209,0.002342013,0.002163112,0.002589884,0.002667757,0.003058396,0.003213089,0.003280551,0.003629715,0.003708516,0.004042156,0.003728079,0.004124743,0.00426416,0.00430204,0.004666305,0.004781228,0.005068466,0.00538157,0.005867491,0.006224905,0.00672271,0.007854882,0.008882479,0.010215929,0.011324204,0.013350124,0.016087627,0.018268187,0.022744102,0.02795395,0.035096801,0.043252218,0.052214304,0.066612172,0.077688104,0.094474234,0.117901039,0.139713337,0.166605302,0.191522394,0.234507695,0.275085355,0.308817553,0.323885781,0.345976875,0.370988961,0.401858969,0.433311165,0.50664124,0.598530036,0.691476197,0.785491061,0.881467234,0.977861496])
        mort[:,3]=dfactor[3]*mort[:,4]
        mort[:,5]=dfactor[5]*mort[:,4]
        
        mort=1-(1-mort)**self.timestep

        return mort

    def get_student_rate_v1(self,debug=False):
        '''
        opiskelijoiden intensiteetit eri ryhmille
        
        vanha rutiini, ei kurantti
        '''
        if not self.silent:
            print('student year',self.year)
        if self.year==2018:
            miehet_in=np.array([0.14161,0.17243,0.13722,0.09268,0.08827,0.07784,0.05886,0.04234,0.03108,0.02376,0.02297,0.01840,0.01626,0.01347,0.01075,0.01019,0.00896,0.00814,0.00742,0.00710,0.00648,0.00578,0.00542,0.00527,0.00451,0.00409,0.00397,0.00385,0.00359,0.00355,0.00346,0.00300,0.00284,0.00262,0.00243,0.00244,0.00211,0.00201,0.00194,0.00175,0.00133,0.00110,0.00094,0.00094,0.00107,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_in=np.array([0.06791,0.09761,0.10086,0.09411,0.08530,0.06874,0.05102,0.04067,0.03265,0.02571,0.02824,0.02500,0.02147,0.01935,0.01808,0.01668,0.01558,0.01477,0.01286,0.01175,0.01105,0.00932,0.00859,0.00810,0.00741,0.00657,0.00617,0.00569,0.00562,0.00502,0.00459,0.00447,0.00414,0.00325,0.00301,0.00301,0.00291,0.00244,0.00238,0.00183,0.00154,0.00135,0.00094,0.00070,0.00071,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.49960,0.36251,0.35144,0.22735,0.28455,0.39111,0.43548,0.43147,0.41566,0.40867,0.43562,0.36303,0.41632,0.44223,0.30343,0.36754,0.33380,0.33538,0.28808,0.33422,0.35189,0.31087,0.27147,0.39144,0.33943,0.28357,0.28192,0.31797,0.26326,0.27507,0.38591,0.30785,0.33354,0.32441,0.43705,0.25007,0.37159,0.25007,0.36427,0.50069,0.44014,0.47994,0.25003,0.63541,0.25002,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.56309,0.21796,0.20379,0.27074,0.35122,0.40776,0.37704,0.38145,0.39233,0.31660,0.35885,0.38048,0.34256,0.31260,0.31512,0.30657,0.28801,0.36577,0.33033,0.30241,0.39329,0.31962,0.29713,0.32875,0.35980,0.30874,0.32830,0.26172,0.35346,0.33895,0.27776,0.32496,0.46528,0.32964,0.25009,0.28992,0.41271,0.28992,0.48613,0.41931,0.38657,0.58156,0.52913,0.56370,0.25002,1.00000,0.00000,0.00000,0.00000,0.00000,0.25666,0.00000,1.00000])
        elif self.year==2019:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,1.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2020:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,0.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2021:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,0.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        elif self.year==2022:
            miehet_in=np.array([0.269709,0.115897,0.100621,0.087394,0.080160,0.067278,0.052751,0.039443,0.030027,0.023280,0.022410,0.018482,0.015504,0.014042,0.011996,0.009895,0.009591,0.009011,0.007855,0.006692,0.006976,0.006382,0.006373,0.005527,0.004992,0.004727,0.004177,0.004189,0.003907,0.003362,0.003654,0.003394,0.003120,0.002861,0.002873,0.002323,0.002363,0.002098,0.001818,0.001859,0.001611,0.001348,0.001129,0.001167,0.002069,0.003377,0.004348,0.005346,0.043282,0.130107,0.000000,0.000000,0.000000])
            naiset_in=np.array([0.31373,0.10342,0.10456,0.09527,0.08635,0.07221,0.05462,0.04097,0.03221,0.02819,0.05727,0.05133,0.04893,0.04294,0.04119,0.03559,0.03431,0.03207,0.02986,0.02547,0.02478,0.02315,0.02016,0.01879,0.01688,0.01592,0.01398,0.01337,0.01328,0.01178,0.01095,0.00986,0.00881,0.00803,0.00735,0.00676,0.00655,0.00614,0.00486,0.00458,0.00373,0.00302,0.00229,0.00191,0.00147,0.00197,0.00369,0.00622,0.00800,0.01322,0,0,0])
            miehet_ulos=np.array([0.66959,0.31098,0.29804,0.21910,0.30345,0.37986,0.43198,0.42020,0.41082,0.42450,0.41999,0.39704,0.34351,0.39286,0.41667,0.27857,0.30882,0.37500,0.39286,0.25000,0.33000,0.25000,0.38043,0.35000,0.30556,0.36765,0.25000,0.31667,0.39286,0.25000,0.32692,0.33333,0.34091,0.25000,0.45000,0.25000,0.37500,0.39286,0.25000,0.41667,0.45000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000])
            naiset_ulos=np.array([0.724891,0.2,0.2,0.267584047,0.330199061,0.397874665,0.411892606,0.394239526,0.319643142,0.370672161,0.601628502,0.542579139,0.610861022,0.537332718,0.618460223,0.528486219,0.554784021,0.55942656,0.630835508,0.519547139,0.556471878,0.618060292,0.561205814,0.591992585,0.551545626,0.618498516,0.561291569,0.5,0.612180089,0.568581974,0.599439994,0.608381541,0.590793737,0.587158664,0.581558482,0.539230288,0.568325461,0.709754845,0.572104862,0.693709777,0.701485514,0.764725196,0.700235258,0.937531871,0.5,0.517646111,0.56778402,0.5,0.71104753,0.5,0,0,0])
        else:
            error(1)        
            
        inrate=np.zeros((101,self.n_groups))
        inrate[18:71,0] = miehet_in
        inrate[18:71,1] = miehet_in
        inrate[18:71,2] = miehet_in
        inrate[18:71,3] = naiset_in
        inrate[18:71,4] = naiset_in
        inrate[18:71,5] = naiset_in
        
        outrate=np.zeros((101,self.n_groups))
        outrate[18:71,0] = miehet_ulos
        outrate[18:71,1] = miehet_ulos
        outrate[18:71,2] = miehet_ulos
        outrate[18:71,3] = naiset_ulos
        outrate[18:71,4] = naiset_ulos
        outrate[18:71,5] = naiset_ulos
        
        inrate=1-(1-inrate)**self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate
        
        
    def get_student_rate_v2(self,debug=False):
        '''
        opiskelijoiden intensiteetit eri ryhmille
        päivitetty 21.2.2022
        '''
        if not self.silent:
            print('student year',self.year)
        if self.year==2018:
            miehet_in=np.array([0.21728,0.21294,0.16152,0.10390,0.09916,0.08841,0.06817,0.05010,0.03725,0.02882,0.02728,0.02211,0.01975,0.01634,0.01302,0.01219,0.01058,0.00947,0.00848,0.00804,0.00722,0.00636,0.00588,0.00563,0.00479,0.00436,0.00419,0.00406,0.00378,0.00374,0.00369,0.00318,0.00304,0.00279,0.00261,0.00258,0.00230,0.00220,0.00215,0.00195,0.00152,0.00130,0.00110,0.00120,0.00122,0.00154,0.00271,0.00443,0.00550,0.00658,0.02273,0.14432,0.18813])
            miehet_ulos=np.array([0.44266,0.33548,0.34003,0.22310,0.28109,0.38819,0.43322,0.42976,0.41436,0.40765,0.43483,0.36232,0.41566,0.44173,0.30302,0.36713,0.33349,0.33508,0.28783,0.33393,0.35167,0.31066,0.27129,0.39125,0.33928,0.28342,0.28179,0.31784,0.26314,0.27495,0.38577,0.30775,0.33342,0.32432,0.43695,0.25000,0.37151,0.25000,0.36419,0.50062,0.44009,0.47991,0.25000,0.63538,0.25000,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.05567,1.00000])
            naiset_in=np.array([0.12531,0.11146,0.11651,0.11188,0.10283,0.08525,0.06465,0.05391,0.04458,0.03631,0.03896,0.03547,0.03103,0.02839,0.02620,0.02345,0.02153,0.01958,0.01632,0.01447,0.01328,0.01102,0.00969,0.00898,0.00819,0.00706,0.00659,0.00602,0.00589,0.00530,0.00481,0.00471,0.00436,0.00343,0.00317,0.00321,0.00314,0.00265,0.00262,0.00203,0.00175,0.00156,0.00109,0.00088,0.00083,0.00169,0.00279,0.00607,0.00864,0.01001,0.04213,0.11589,0.24508])
            naiset_ulos=np.array([0.52281,0.21239,0.20000,0.26844,0.34964,0.40692,0.37685,0.38145,0.39233,0.31660,0.35885,0.38048,0.34256,0.31260,0.31512,0.30657,0.28801,0.36577,0.33033,0.30227,0.39302,0.31928,0.29695,0.32849,0.35946,0.30851,0.32807,0.26151,0.35329,0.33877,0.27762,0.32482,0.46516,0.32953,0.25000,0.28980,0.41260,0.28984,0.48604,0.41925,0.38651,0.58150,0.52909,0.56367,0.25000,1.00000,0.00000,0.00000,0.00000,0.00000,0.25666,0.00000,1.00000])
        elif self.year==2019:
            miehet_in=np.array([0.22117,0.19325,0.15323,0.10761,0.10270,0.08927,0.06856,0.05017,0.03823,0.02952,0.02724,0.02263,0.01912,0.01725,0.01450,0.01215,0.01155,0.01070,0.00915,0.00918,0.00802,0.00700,0.00684,0.00594,0.00543,0.00505,0.00446,0.00434,0.00423,0.00464,0.00393,0.00354,0.00335,0.00297,0.00295,0.00267,0.00251,0.00228,0.00196,0.00189,0.00192,0.00157,0.00117,0.00087,0.00088,0.00158,0.00263,0.00371,0.00388,0.00804,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.47002,0.31084,0.29609,0.22186,0.30353,0.37863,0.43056,0.42467,0.40636,0.42181,0.42118,0.39594,0.35035,0.39676,0.40295,0.28438,0.30378,0.38469,0.39128,0.25000,0.35599,0.25709,0.37319,0.32074,0.32387,0.35698,0.28210,0.28163,0.38592,0.25000,0.35966,0.30236,0.37053,0.26964,0.36568,0.31758,0.35021,0.40542,0.32339,0.27838,0.44144,0.52387,0.50452,0.28495,0.46027,1.00000,0.00000,0.00000,0.00000,0.00000,0.15668,0.03551,1.00000])
            naiset_in=np.array([0.17483,0.13818,0.12870,0.10888,0.09491,0.07643,0.05850,0.04487,0.03498,0.03084,0.03078,0.02911,0.02770,0.02539,0.02469,0.02157,0.02091,0.01937,0.01847,0.02666,0.02322,0.02769,0.02497,0.02233,0.02221,0.02584,0.02113,0.02307,0.02249,0.02168,0.02246,0.02296,0.02266,0.02345,0.02435,0.03022,0.02997,0.03031,0.03509,0.04018,0.04847,0.04780,0.04390,0.02666,0.01939,0.02134,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.52489,0.20000,0.20000,0.26758,0.33020,0.39787,0.41189,0.39424,0.31964,0.37067,0.35163,0.29258,0.36086,0.28733,0.36846,0.27849,0.30478,0.30943,0.38084,0.26955,0.30647,0.36806,0.31121,0.34199,0.30155,0.36850,0.31129,0.25000,0.36218,0.31858,0.34944,0.35838,0.34079,0.33716,0.33156,0.28923,0.31833,0.45975,0.32210,0.44371,0.45149,0.51473,0.45024,0.68753,0.25000,1.00000,0.00000,0.00000,0.00000,0.00000,0.29745,0.29846,1.00000])
        elif self.year==2020: # päivitä, väärä taso
            miehet_in=np.array([0.28126,0.23354,0.16628,0.12463,0.11995,0.10271,0.07764,0.05709,0.04187,0.03168,0.03159,0.02607,0.02149,0.01840,0.01683,0.01399,0.01233,0.01203,0.01072,0.00942,0.00834,0.00789,0.00760,0.00708,0.00599,0.00540,0.00503,0.00463,0.00457,0.00451,0.00468,0.00406,0.00338,0.00331,0.00315,0.00267,0.00247,0.00243,0.00212,0.00195,0.00216,0.00184,0.00122,0.00088,0.00070,0.00153,0.00210,0.00393,0.00490,0.00539,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.42899,0.36360,0.27355,0.22341,0.30308,0.38769,0.42051,0.43701,0.43068,0.35651,0.42497,0.41356,0.38899,0.32422,0.40320,0.35793,0.26502,0.33915,0.35435,0.34469,0.29838,0.26872,0.30468,0.39217,0.34417,0.32130,0.34820,0.25000,0.26658,0.41782,0.25000,0.41395,0.27968,0.30701,0.41259,0.34313,0.27482,0.39811,0.35460,0.42836,0.25000,0.58498,0.52783,0.48150,0.34272,1.00000,0.00000,0.00000,0.00000,0.00000,0.05333,0.14129,1.00000])
            naiset_in=np.array([0.16393,0.13971,0.14499,0.13711,0.12912,0.10432,0.08065,0.06065,0.04711,0.04092,0.04504,0.03982,0.03669,0.03446,0.03156,0.02875,0.02573,0.02263,0.02092,0.01836,0.01567,0.01507,0.01332,0.01155,0.01034,0.00872,0.00818,0.00761,0.00712,0.00693,0.00603,0.00545,0.00523,0.00498,0.00448,0.00381,0.00374,0.00356,0.00292,0.00279,0.00250,0.00189,0.00136,0.00103,0.00073,0.00153,0.00174,0.00303,0.00406,0.00548,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.49775,0.22225,0.20000,0.24662,0.35050,0.39692,0.44011,0.41056,0.35542,0.27470,0.38762,0.33398,0.31336,0.31660,0.31388,0.32582,0.33603,0.28082,0.34313,0.34831,0.28379,0.31629,0.35235,0.32416,0.38691,0.29405,0.31742,0.30691,0.28049,0.37861,0.35056,0.29108,0.30610,0.35474,0.44799,0.25000,0.30810,0.44019,0.32360,0.38514,0.50159,0.52762,0.48742,0.56100,0.57378,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.19404,1.00000])
        elif self.year==2021: # päivitä, väärä taso
            miehet_in=np.array([0.28126,0.23354,0.16628,0.12463,0.11995,0.10271,0.07764,0.05709,0.04187,0.03168,0.03159,0.02607,0.02149,0.01840,0.01683,0.01399,0.01233,0.01203,0.01072,0.00942,0.00834,0.00789,0.00760,0.00708,0.00599,0.00540,0.00503,0.00463,0.00457,0.00451,0.00468,0.00406,0.00338,0.00331,0.00315,0.00267,0.00247,0.00243,0.00212,0.00195,0.00216,0.00184,0.00122,0.00088,0.00070,0.00153,0.00210,0.00393,0.00490,0.00539,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.42899,0.36360,0.27355,0.22341,0.30308,0.38769,0.42051,0.43701,0.43068,0.35651,0.42497,0.41356,0.38899,0.32422,0.40320,0.35793,0.26502,0.33915,0.35435,0.34469,0.29838,0.26872,0.30468,0.39217,0.34417,0.32130,0.34820,0.25000,0.26658,0.41782,0.25000,0.41395,0.27968,0.30701,0.41259,0.34313,0.27482,0.39811,0.35460,0.42836,0.25000,0.58498,0.52783,0.48150,0.34272,1.00000,0.00000,0.00000,0.00000,0.00000,0.05333,0.14129,1.00000])
            naiset_in=np.array([0.16393,0.13971,0.14499,0.13711,0.12912,0.10432,0.08065,0.06065,0.04711,0.04092,0.04504,0.03982,0.03669,0.03446,0.03156,0.02875,0.02573,0.02263,0.02092,0.01836,0.01567,0.01507,0.01332,0.01155,0.01034,0.00872,0.00818,0.00761,0.00712,0.00693,0.00603,0.00545,0.00523,0.00498,0.00448,0.00381,0.00374,0.00356,0.00292,0.00279,0.00250,0.00189,0.00136,0.00103,0.00073,0.00153,0.00174,0.00303,0.00406,0.00548,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.49775,0.22225,0.20000,0.24662,0.35050,0.39692,0.44011,0.41056,0.35542,0.27470,0.38762,0.33398,0.31336,0.31660,0.31388,0.32582,0.33603,0.28082,0.34313,0.34831,0.28379,0.31629,0.35235,0.32416,0.38691,0.29405,0.31742,0.30691,0.28049,0.37861,0.35056,0.29108,0.30610,0.35474,0.44799,0.25000,0.30810,0.44019,0.32360,0.38514,0.50159,0.52762,0.48742,0.56100,0.57378,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.19404,1.00000])
        elif self.year==2022: # päivitä, väärä taso
            miehet_in=np.array([0.28126,0.23354,0.16628,0.12463,0.11995,0.10271,0.07764,0.05709,0.04187,0.03168,0.03159,0.02607,0.02149,0.01840,0.01683,0.01399,0.01233,0.01203,0.01072,0.00942,0.00834,0.00789,0.00760,0.00708,0.00599,0.00540,0.00503,0.00463,0.00457,0.00451,0.00468,0.00406,0.00338,0.00331,0.00315,0.00267,0.00247,0.00243,0.00212,0.00195,0.00216,0.00184,0.00122,0.00088,0.00070,0.00153,0.00210,0.00393,0.00490,0.00539,0.00000,0.00000,0.00000])
            miehet_ulos=np.array([0.42899,0.36360,0.27355,0.22341,0.30308,0.38769,0.42051,0.43701,0.43068,0.35651,0.42497,0.41356,0.38899,0.32422,0.40320,0.35793,0.26502,0.33915,0.35435,0.34469,0.29838,0.26872,0.30468,0.39217,0.34417,0.32130,0.34820,0.25000,0.26658,0.41782,0.25000,0.41395,0.27968,0.30701,0.41259,0.34313,0.27482,0.39811,0.35460,0.42836,0.25000,0.58498,0.52783,0.48150,0.34272,1.00000,0.00000,0.00000,0.00000,0.00000,0.05333,0.14129,1.00000])
            naiset_in=np.array([0.16393,0.13971,0.14499,0.13711,0.12912,0.10432,0.08065,0.06065,0.04711,0.04092,0.04504,0.03982,0.03669,0.03446,0.03156,0.02875,0.02573,0.02263,0.02092,0.01836,0.01567,0.01507,0.01332,0.01155,0.01034,0.00872,0.00818,0.00761,0.00712,0.00693,0.00603,0.00545,0.00523,0.00498,0.00448,0.00381,0.00374,0.00356,0.00292,0.00279,0.00250,0.00189,0.00136,0.00103,0.00073,0.00153,0.00174,0.00303,0.00406,0.00548,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.49775,0.22225,0.20000,0.24662,0.35050,0.39692,0.44011,0.41056,0.35542,0.27470,0.38762,0.33398,0.31336,0.31660,0.31388,0.32582,0.33603,0.28082,0.34313,0.34831,0.28379,0.31629,0.35235,0.32416,0.38691,0.29405,0.31742,0.30691,0.28049,0.37861,0.35056,0.29108,0.30610,0.35474,0.44799,0.25000,0.30810,0.44019,0.32360,0.38514,0.50159,0.52762,0.48742,0.56100,0.57378,1.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.19404,1.00000])
        else:
            error(1)        
            
        inrate=np.zeros((101,self.n_groups))
        inrate[18:71,0] =0.8*miehet_in
        inrate[18:71,1] =1.0*miehet_in
        inrate[18:71,2] =1.3*miehet_in
        inrate[18:71,3] =0.7*naiset_in
        inrate[18:71,4] =1.0*naiset_in
        inrate[18:71,5] =1.45*naiset_in
        
        outrate=np.zeros((101,self.n_groups))
        outrate[18:71,0]=miehet_ulos
        outrate[18:71,1]=miehet_ulos
        outrate[18:71,2]=miehet_ulos
        outrate[18:71,3]=naiset_ulos
        outrate[18:71,4]=naiset_ulos
        outrate[18:71,5]=naiset_ulos
        
        inrate=1-(1-inrate)**self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate
        
    def get_outsider_rate(self,debug=False):
        '''
        sairauspäivärahalle jäävien osuudet
        '''
        inrate=np.zeros((101,self.n_groups))
        outrate=np.zeros((101,self.n_groups))
        

        if self.year==2018:
            miehet_in=np.array([0.08312,0.07170,0.03664,0.01592,0.01342,0.01247,0.01212,0.01224,0.01216,0.01225,0.01217,0.01340,0.01419,0.01308,0.01295,0.01355,0.01196,0.01175,0.01084,0.01241,0.01052,0.01071,0.01003,0.01039,0.00926,0.01055,0.00942,0.00934,0.00930,0.00931,0.01169,0.00938,0.01171,0.00986,0.01219,0.01021,0.01131,0.01153,0.01218,0.01141,0.01136,0.01177,0.01161,0.01263,0.01158,0.00992,0.00840,0.01127,0.01165,0.01495,0.09850,0.34210,0.44240])
            miehet_ulos=np.array([0.20000,0.20000,0.73072,0.35858,0.28056,0.24768,0.21320,0.21800,0.20992,0.22517,0.21098,0.20000,0.20000,0.32298,0.20000,0.20000,0.27113,0.20000,0.23989,0.20000,0.22525,0.20000,0.27846,0.20000,0.20891,0.20000,0.21007,0.20224,0.20181,0.26840,0.20000,0.22421,0.20000,0.24061,0.20000,0.26866,0.20000,0.20000,0.20000,0.25034,0.22439,0.26118,0.24923,0.34061,0.69689,0.75980,0.43310,0.45554,0.21519,0.32491,1.00000,0.00000,0.00000])
            naiset_in=np.array([0.06639,0.01999,0.01437,0.00897,0.00675,0.00440,0.00128,0.00015,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00373,0.00722,0.01064,0.00631,0.00934,0.01292,0.00971,0.01039,0.00992,0.00828,0.00991,0.00831,0.00838,0.00829,0.00857,0.00811,0.01017,0.00972,0.00904,0.00963,0.00958,0.01048,0.01040,0.01075,0.01161,0.01189,0.01127,0.01265,0.01513,0.01677,0.02004,0.13711,0.47814,0.63474])
            naiset_ulos=np.array([0.20000,0.50091,0.59426,0.46558,0.57618,0.91964,0.75432,1.00000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.24979,0.20000,0.20066,0.21237,0.24666,0.20000,0.21294,0.20000,0.20000,0.20028,0.20000,0.22348,0.20000,0.20000,0.26004,0.25188,0.65729,0.65482,0.62891,0.48738,0.34080,0.25416,1.00000,0.00000,0.00000])
        elif self.year==2019: # päivitä, väärä taso
            miehet_in=np.array([0.08515,0.07194,0.03705,0.01650,0.01355,0.01291,0.01171,0.01102,0.01385,0.01194,0.01162,0.01183,0.01209,0.01274,0.01174,0.01451,0.01097,0.01045,0.01278,0.01033,0.01312,0.01039,0.00999,0.00990,0.01015,0.01240,0.00984,0.01101,0.01029,0.01012,0.00979,0.01119,0.01035,0.01022,0.01120,0.01384,0.01121,0.01234,0.01181,0.01190,0.01223,0.01223,0.01966,0.01932,0.01515,0.01198,0.00745,0.00755,0.00961,0.01707,0.03446,0.05245,0.05447])
            miehet_ulos=np.array([0.20000,0.20000,0.72389,0.38121,0.26401,0.29792,0.27632,0.20373,0.20000,0.24341,0.20000,0.25429,0.20000,0.20000,0.34205,0.20000,0.22781,0.22752,0.20000,0.26895,0.20000,0.20000,0.20051,0.27570,0.20000,0.20000,0.21541,0.20000,0.20000,0.23828,0.22046,0.20000,0.20000,0.25365,0.20000,0.20000,0.25743,0.20000,0.20000,0.22230,0.21130,0.26775,0.20000,0.20000,0.59939,0.88643,0.58026,0.56801,0.20000,0.20000,1.00000,0.00000,0.00000])
            naiset_in=np.array([0.06174,0.01791,0.01179,0.00571,0.00232,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00859,0.00583,0.01076,0.00985,0.00793,0.00887,0.01250,0.00893,0.00990,0.00845,0.00832,0.00841,0.00815,0.00891,0.00829,0.00805,0.01189,0.00998,0.00916,0.01105,0.00938,0.00943,0.01089,0.01420,0.01561,0.01318,0.01142,0.00801,0.00860,0.00927,0.00933,0.00000,0.00000,0.00000])
            naiset_ulos=np.array([0.20000,0.53481,0.71249,0.79422,0.72073,1.00000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.22971,0.20000,0.21112,0.20000,0.23240,0.20571,0.20000,0.20000,0.24701,0.20000,0.20559,0.21295,0.20000,0.20000,0.20000,0.53614,0.84136,0.58640,0.65729,0.20000,0.31241,1.00000,0.00000,0.00000])
        elif self.year==2020: # päivitä, väärä taso
            miehet_in=np.array([0.08193,0.05458,0.03232,0.01591,0.01378,0.01285,0.01241,0.01120,0.01271,0.01351,0.01215,0.01187,0.01133,0.01126,0.01097,0.01062,0.01128,0.01234,0.01048,0.01103,0.00997,0.01166,0.01005,0.00972,0.00941,0.00973,0.01213,0.00983,0.00990,0.00983,0.00967,0.01101,0.01003,0.01021,0.01004,0.01095,0.01277,0.01088,0.01276,0.01154,0.01198,0.01141,0.01125,0.01459,0.01121,0.01229,0.00862,0.01094,0.00732,0.02417,0.03420,0.04771,0.05484])
            miehet_ulos=np.array([0.20000,0.20000,0.67852,0.34437,0.27667,0.24578,0.31556,0.22790,0.20000,0.20000,0.24643,0.26370,0.20000,0.21650,0.22107,0.24762,0.20000,0.20000,0.23273,0.20000,0.20237,0.20000,0.21739,0.25902,0.20000,0.20000,0.20000,0.21246,0.20000,0.22123,0.20187,0.20000,0.22850,0.20000,0.24548,0.20000,0.20000,0.24192,0.20000,0.21098,0.26110,0.21027,0.29475,0.20000,0.26854,0.88418,0.51698,0.69836,0.24253,0.20000,1.00000,0.00000,0.00000])
            naiset_in=np.array([0.06085,0.01854,0.01317,0.00718,0.00064,0.00001,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00521,0.00507,0.01401,0.00940,0.01052,0.00973,0.00963,0.00864,0.00964,0.00805,0.00888,0.00827,0.00833,0.00854,0.00840,0.00842,0.01073,0.01024,0.01088,0.00970,0.01101,0.01066,0.01197,0.01060,0.01388,0.01131,0.01230,0.00891,0.01034,0.00773,0.01419,0.03925,0.05194,0.07701])
            naiset_ulos=np.array([0.20000,0.50985,0.66402,0.80819,1.00000,1.00000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20075,0.20000,0.20000,0.21162,0.20000,0.20637,0.26438,0.20000,0.20000,0.20000,0.20855,0.20000,0.24376,0.20000,0.20526,0.20000,0.27041,0.85866,0.60710,0.66057,0.33685,0.20000,1.00000,0.00000,0.00000 ])
        elif self.year==2021: # päivitä, väärä taso
            miehet_in=np.array([0.08193,0.05458,0.03232,0.01591,0.01378,0.01285,0.01241,0.01120,0.01271,0.01351,0.01215,0.01187,0.01133,0.01126,0.01097,0.01062,0.01128,0.01234,0.01048,0.01103,0.00997,0.01166,0.01005,0.00972,0.00941,0.00973,0.01213,0.00983,0.00990,0.00983,0.00967,0.01101,0.01003,0.01021,0.01004,0.01095,0.01277,0.01088,0.01276,0.01154,0.01198,0.01141,0.01125,0.01459,0.01121,0.01229,0.00862,0.01094,0.00732,0.02417,0.03420,0.04771,0.05484])
            miehet_ulos=np.array([0.20000,0.20000,0.67852,0.34437,0.27667,0.24578,0.31556,0.22790,0.20000,0.20000,0.24643,0.26370,0.20000,0.21650,0.22107,0.24762,0.20000,0.20000,0.23273,0.20000,0.20237,0.20000,0.21739,0.25902,0.20000,0.20000,0.20000,0.21246,0.20000,0.22123,0.20187,0.20000,0.22850,0.20000,0.24548,0.20000,0.20000,0.24192,0.20000,0.21098,0.26110,0.21027,0.29475,0.20000,0.26854,0.88418,0.51698,0.69836,0.24253,0.20000,1.00000,0.00000,0.00000])
            naiset_in=np.array([0.06085,0.01854,0.01317,0.00718,0.00064,0.00001,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00521,0.00507,0.01401,0.00940,0.01052,0.00973,0.00963,0.00864,0.00964,0.00805,0.00888,0.00827,0.00833,0.00854,0.00840,0.00842,0.01073,0.01024,0.01088,0.00970,0.01101,0.01066,0.01197,0.01060,0.01388,0.01131,0.01230,0.00891,0.01034,0.00773,0.01419,0.03925,0.05194,0.07701])
            naiset_ulos=np.array([0.20000,0.50985,0.66402,0.80819,1.00000,1.00000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20075,0.20000,0.20000,0.21162,0.20000,0.20637,0.26438,0.20000,0.20000,0.20000,0.20855,0.20000,0.24376,0.20000,0.20526,0.20000,0.27041,0.85866,0.60710,0.66057,0.33685,0.20000,1.00000,0.00000,0.00000 ])
        elif self.year==2022: # päivitä, väärä taso
            miehet_in=np.array([0.08193,0.05458,0.03232,0.01591,0.01378,0.01285,0.01241,0.01120,0.01271,0.01351,0.01215,0.01187,0.01133,0.01126,0.01097,0.01062,0.01128,0.01234,0.01048,0.01103,0.00997,0.01166,0.01005,0.00972,0.00941,0.00973,0.01213,0.00983,0.00990,0.00983,0.00967,0.01101,0.01003,0.01021,0.01004,0.01095,0.01277,0.01088,0.01276,0.01154,0.01198,0.01141,0.01125,0.01459,0.01121,0.01229,0.00862,0.01094,0.00732,0.02417,0.03420,0.04771,0.05484])
            miehet_ulos=np.array([0.20000,0.20000,0.67852,0.34437,0.27667,0.24578,0.31556,0.22790,0.20000,0.20000,0.24643,0.26370,0.20000,0.21650,0.22107,0.24762,0.20000,0.20000,0.23273,0.20000,0.20237,0.20000,0.21739,0.25902,0.20000,0.20000,0.20000,0.21246,0.20000,0.22123,0.20187,0.20000,0.22850,0.20000,0.24548,0.20000,0.20000,0.24192,0.20000,0.21098,0.26110,0.21027,0.29475,0.20000,0.26854,0.88418,0.51698,0.69836,0.24253,0.20000,1.00000,0.00000,0.00000])
            naiset_in=np.array([0.06085,0.01854,0.01317,0.00718,0.00064,0.00001,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00521,0.00507,0.01401,0.00940,0.01052,0.00973,0.00963,0.00864,0.00964,0.00805,0.00888,0.00827,0.00833,0.00854,0.00840,0.00842,0.01073,0.01024,0.01088,0.00970,0.01101,0.01066,0.01197,0.01060,0.01388,0.01131,0.01230,0.00891,0.01034,0.00773,0.01419,0.03925,0.05194,0.07701])
            naiset_ulos=np.array([0.20000,0.50985,0.66402,0.80819,1.00000,1.00000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20000,0.20075,0.20000,0.20000,0.21162,0.20000,0.20637,0.26438,0.20000,0.20000,0.20000,0.20855,0.20000,0.24376,0.20000,0.20526,0.20000,0.27041,0.85866,0.60710,0.66057,0.33685,0.20000,1.00000,0.00000,0.00000 ])
        else:
            error(990)
        
        min_age=18
        max_spv=71
        inrate[min_age:max_spv,0]=1.3*miehet_in
        inrate[min_age:max_spv,1]=1.0*miehet_in
        inrate[min_age:max_spv,2]=0.7*miehet_in
        inrate[min_age:max_spv,3]=1.2*naiset_in
        inrate[min_age:max_spv,4]=1.0*naiset_in
        inrate[min_age:max_spv,5]=0.8*naiset_in
        outrate[min_age:max_spv,0]=0.7*miehet_ulos
        outrate[min_age:max_spv,1]=1.0*miehet_ulos
        outrate[min_age:max_spv,2]=1.3*miehet_ulos
        outrate[min_age:max_spv,3]=0.8*naiset_ulos
        outrate[min_age:max_spv,4]=1.0*naiset_ulos
        outrate[min_age:max_spv,5]=1.2*naiset_ulos
        
        inrate=1-(1-inrate)**self.timestep
        outrate=1-(1-outrate)**self.timestep

        return inrate,outrate
        
    def get_disability_rate(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Data ETK:n tilastotietokannasta ja skaalattu ikäluokittaisillä miesten ja naisten määrillä
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.2,0.8,0.4,1.1,0.8,0.5])*0.9
        
        dis_miehet=np.array([0.004697942,00.004697942,00.004697942,0.004435302,0.003631736,0.003141361,0.003457091,0.003005607,0.002905609,0.003029283,0.002289213,0.002137714,0.001854558,0.002813517,0.002607335,0.00292628,0.002937462,0.002784612,0.002846377,0.002776506,0.003017675,0.003129845,0.003349059,0.002991577,0.00305634,0.003446143,0.003633971,0.004045113,0.004002001,0.004517725,0.005527525,0.005565513,0.006319492,0.007399175,0.00731299,0.009142823,0.010254463,0.011784364,0.013783743,0.015299156,0.018282001,0.024051257,0.032338044,0.028290544,0.019444444,0.00454486,0.000330718,0,0,0,0,0,0])
        dis_naiset=np.array([0.00532654,0.00532654,0.00532654,0.004917401,0.00453191,0.003799551,0.003253733,0.003092307,0.002822592,0.003309772,0.002482279,0.002615887,0.002416545,0.003546203,0.002665276,0.003095104,0.003129633,0.003406418,0.003171677,0.003320357,0.003391292,0.004007371,0.004310094,0.00438571,0.004267343,0.004889399,0.005043702,0.005793425,0.005569451,0.006298434,0.006363081,0.007043361,0.009389811,0.007457667,0.009251373,0.011154836,0.009524088,0.013689796,0.014658423,0.017440417,0.022804727,0.02677838,0.037438459,0.034691279,0.022649573,0.004414073,0.000264568,0,0,0,0,0,0])
        # ei varhaiseläkkeitä mukana, joten oletetaan ettei tk-intensiteetti laske
        dis_miehet[41:51]=np.maximum(dis_miehet[41:51],0.02829054)
        dis_naiset[41:51]=np.maximum(dis_naiset[41:51],0.03469128)
        
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis_miehet
            disab[70:(self.max_age+1),g]=24.45*dfactor[g]/1000
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis_naiset
            disab[70:(self.max_age+1),g]=24.45*dfactor[g]/1000

        disab=1-(1-disab)**self.timestep

        return disab        
        
    def get_eff_disab_rate(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.95,0.6,1.2,1.0,0.9])
            
        if self.year==2018:
            dis_miehet=np.array([0.003844207,0.003844207,0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.003152456,0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2019:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2020:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        elif self.year==2021:
            dis_miehet=np.array([0.003844207,0.002157312,0,0.002915577,0.00081677,0.001404834,0.00177282,0,0,0.001891443,0,0.002265095,0,0.00268058,0.000697237,0,0.002079174,0.000263783,0,0.004538401,0,0.000631472,0.001079217,0.003555183,0.00458235,0.001800932,0.004376534,0.004341663,0.002335098,0.006036927,0.005459469,0.005254058,0.007632643,0.004282522,0.009607954,0.015170352,0.014231176,0.010977463,0.023104034,0.03462797,0.034507729,0.025464606,0.026129996,0.023528766,0.023334155,0.020393979,0.020180711,0.0201807,0.020180711,0.020180711,0.020180711,0.020180711,0.020180711])
            dis_naiset=np.array([0.003152456,0.001820899,0.003082487,0,0.001199533,0.00071851,0.000822116,0,0,3.56077E-05,0.002908854,0,6.90884E-05,0.001931247,0.000380501,0.002139637,0,0.001647453,0.002016588,0.001331603,0.001264028,0.002000195,0.001846965,0.003387732,0.003038917,0.003380599,0.00250926,0.003730162,0.004742885,0.002853525,0.007630704,0.004648271,0.00473735,0.007128777,0.007198634,0.01655657,0.011752225,0.019697643,0.023829746,0.026050823,0.037670072,0.022548783,0.024075564,0.021665082,0.021334812,0.018765714,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929,0.018557929])
        else:
            error(999)
            
        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        y=np.arange(53-41)*0.007
        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]+y

        y=np.arange(53-41)*0.007
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]+y
            
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis2_miehet
            disab[70:(self.max_age+1),g]=disab[70,g]
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis2_naiset
            disab[70:(self.max_age+1),g]=disab[70,g]
            
        disab=1-(1-disab)**self.timestep

        return disab        

    def get_eff_disab_rate_v2(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        Revisio 2021
        '''
        disab=np.zeros((self.max_age+1,self.n_groups))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.99,0.7,1.22,0.99,0.7])
            
        if not self.silent:
            print(f'disability rate from year {self.year}')
        
        if self.year==2018:
            dis_miehet=np.array([0.001843851,0.003658169,0.003680459,0.001658913,0.001441249,0.000998233,0.001721171,0.001339106,0.000759567,0.0003,0.0003,0.0003,0.000877352,0.0003,0.001640115,0.001108616,0.001138935,0.000932067,0.000785679,0.000707152,0.00153056,0.001379871,0.001675584,0.000511929,0.001758613,0.003071743,0.003316623,0.00359464,0.003504432,0.003688035,0.00424139,0.004604793,0.005588151,0.006116848,0.005722914,0.007174594,0.009657854,0.01298347,0.013493736,0.01609721,0.022787579,0.030580769,0.031933064,0.053935292,0.045516839,0.070126958,0.094737077,0.119347196,0.143957315,0.168567434,0.193177552,0.217787671,0.24239779])
            dis_naiset=np.array([0.002240569,0.002802935,0.002653046,0.002688376,0.001488096,0.001283103,0.000491848,0.00091387,0.000437645,0.0003,0.0003,0.000744484,0.00088666,0.000900013,0.000571566,0.000793492,0.001485429,0.000357553,0.000780901,0.000738028,0.001665354,0.00153833,0.001532743,0.001703358,0.002411437,0.002757021,0.003268369,0.00298002,0.003206598,0.003658945,0.003776944,0.00507418,0.005041903,0.005678281,0.005507141,0.006348195,0.010284722,0.011802383,0.016029071,0.018361334,0.023195093,0.028940863,0.028915934,0.052675084,0.044797513,0.079433927,0.119443151,0.164825185,0.21558003,0.271707685,0.33320815,0.400081426,0.472327512])
        elif self.year==2019:
            dis_miehet=np.array([0.000876848,0.002960472,0.003562185,0.002816536,0.001087349,0.001172693,0.0005507,0.001533166,0.00071632,0.000815442,0.0003,0.0003,0.0003,0.000903286,0.0003,0.001395861,0.000981765,0.001008343,0.001138327,0.00090694,0.00092769,0.001619803,0.001486931,0.001626252,0.000588734,0.001892431,0.003397432,0.003671775,0.003645492,0.003502879,0.003702427,0.004668737,0.005074696,0.006276354,0.006724048,0.006636386,0.008034452,0.010541761,0.014852053,0.016064491,0.02126095,0.026866916,0.03260453,0.054115556,0.044294464,0.075616969,0.110906855,0.150164121,0.193388768,0.240580795,0.291740203,0.346866991,0.40596116])
            dis_naiset=np.array([0.003046766,0.003126413,0.002577568,0.001824015,0.001764253,0.001019298,0.000820925,0.000647188,0.000820237,0.000456734,0.0003,0.0003,0.000686959,0.000822567,0.000716003,0.000935646,0.000987271,0.001784002,0.000502157,0.000796177,0.000928922,0.001541876,0.001855456,0.001496798,0.002017764,0.002221848,0.002863447,0.003308836,0.003150767,0.003191598,0.004152566,0.004266148,0.005809516,0.005141658,0.006093442,0.006323873,0.007738752,0.011874009,0.014016709,0.018696104,0.023306724,0.028052409,0.031502056,0.053717447,0.046531439,0.078974816,0.114827521,0.154089555,0.196760917,0.242841608,0.292331628,0.345230976,0.401539653])
        elif self.year==2020:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        elif self.year==2021:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        elif self.year==2022:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        else:
            error(999)
            
        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        #y=np.arange(53-41)*0.007
        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]#+y

        #y=np.arange(53-41)*0.007
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]#+y
            
        for g in range(3):
            disab[18:71,g]=dfactor[g]*dis2_miehet
            disab[71:(self.max_age+1),g]=disab[70,g]
        for g in range(3,6):
            disab[18:71,g]=dfactor[g]*dis2_naiset
            disab[71:(self.max_age+1),g]=disab[70,g]
            
        disab=1-(1-disab)**self.timestep

        return disab        
        
    def get_eff_disab_rate_v4(self,debug=False):
        '''
        Työkyvyttömyys-alkavuudet eri ryhmille
        Laskettu havaitusta työkyvyttömien lukumäärästä
        Siksi efektiivinen 
        Revisio 2022
        
        Huomioi M.Laaksonen: Työkyvyttömyyseläkkeelle siirtyminen: trendit, tilannekuva, tulevaisuus
        '''
        disab=np.zeros((self.max_age+1,self.n_groups,self.n_empl))
        # male low, male mid, male high, female low, female mid, female high
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
            unempfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0])
        else:
             # uusitalon selvityksestä Työkyvyttömyyden vuoksi menetetty työura
             # skaalattu alaspäin, jotta tk:laisten kokonaismäärä menee paremmin oikein
            dfactor=np.array([1.3,0.99,0.7,1.22,0.99,0.7])
            base=0.95
            unemp=2.0*base
            unempfactor=np.array([unemp,base,base,base,unemp,base,base,base,base,base,base,base,base,unemp,base,0.0])
            
        if not self.silent:
            print(f'disability rate from year {self.year}')
        
        if self.year==2018:
            dis_miehet=np.array([0.001843851,0.003658169,0.003680459,0.001658913,0.001441249,0.000998233,0.001721171,0.001339106,0.000759567,0.0003,0.0003,0.0003,0.000877352,0.0003,0.001640115,0.001108616,0.001138935,0.000932067,0.000785679,0.000707152,0.00153056,0.001379871,0.001675584,0.000511929,0.001758613,0.003071743,0.003316623,0.00359464,0.003504432,0.003688035,0.00424139,0.004604793,0.005588151,0.006116848,0.005722914,0.007174594,0.009657854,0.01298347,0.013493736,0.01609721,0.022787579,0.030580769,0.031933064,0.053935292,0.045516839,0.070126958,0.094737077,0.119347196,0.143957315,0.168567434,0.193177552,0.217787671,0.24239779])
            dis_naiset=np.array([0.002240569,0.002802935,0.002653046,0.002688376,0.001488096,0.001283103,0.000491848,0.00091387,0.000437645,0.0003,0.0003,0.000744484,0.00088666,0.000900013,0.000571566,0.000793492,0.001485429,0.000357553,0.000780901,0.000738028,0.001665354,0.00153833,0.001532743,0.001703358,0.002411437,0.002757021,0.003268369,0.00298002,0.003206598,0.003658945,0.003776944,0.00507418,0.005041903,0.005678281,0.005507141,0.006348195,0.010284722,0.011802383,0.016029071,0.018361334,0.023195093,0.028940863,0.028915934,0.052675084,0.044797513,0.079433927,0.119443151,0.164825185,0.21558003,0.271707685,0.33320815,0.400081426,0.472327512])
        elif self.year==2019:
            dis_miehet=np.array([0.000876848,0.002960472,0.003562185,0.002816536,0.001087349,0.001172693,0.0005507,0.001533166,0.00071632,0.000815442,0.0003,0.0003,0.0003,0.000903286,0.0003,0.001395861,0.000981765,0.001008343,0.001138327,0.00090694,0.00092769,0.001619803,0.001486931,0.001626252,0.000588734,0.001892431,0.003397432,0.003671775,0.003645492,0.003502879,0.003702427,0.004668737,0.005074696,0.006276354,0.006724048,0.006636386,0.008034452,0.010541761,0.014852053,0.016064491,0.02126095,0.026866916,0.03260453,0.054115556,0.044294464,0.075616969,0.110906855,0.150164121,0.193388768,0.240580795,0.291740203,0.346866991,0.40596116])
            dis_naiset=np.array([0.003046766,0.003126413,0.002577568,0.001824015,0.001764253,0.001019298,0.000820925,0.000647188,0.000820237,0.000456734,0.0003,0.0003,0.000686959,0.000822567,0.000716003,0.000935646,0.000987271,0.001784002,0.000502157,0.000796177,0.000928922,0.001541876,0.001855456,0.001496798,0.002017764,0.002221848,0.002863447,0.003308836,0.003150767,0.003191598,0.004152566,0.004266148,0.005809516,0.005141658,0.006093442,0.006323873,0.007738752,0.011874009,0.014016709,0.018696104,0.023306724,0.028052409,0.031502056,0.053717447,0.046531439,0.078974816,0.114827521,0.154089555,0.196760917,0.242841608,0.292331628,0.345230976,0.401539653])
        elif self.year==2020:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        elif self.year==2021:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        elif self.year==2022:
            dis_miehet=np.array([0.003312921,0.003033677,0.00280668,0.002739109,0.001894902,0.000759493,0.000883458,0.000659681,0.001128652,0.000802366,0.00079778,0.0003,0.0003,0.0003,0.000995463,0.0003,0.001410649,0.000919176,0.001017737,0.001193347,0.00103662,0.001167411,0.001649244,0.001473708,0.001508767,0.000777822,0.001932519,0.003530466,0.003754364,0.003966232,0.003642355,0.004194674,0.004729449,0.005498664,0.006026748,0.007790285,0.007292662,0.009776795,0.011793844,0.016933616,0.020878938,0.026739298,0.030209636,0.051407838,0.044512203,0.076958386,0.113824919,0.155111802,0.200819035,0.250946618,0.305494551,0.364462834,0.427851467])
            dis_naiset=np.array([0.00320579,0.003766581,0.003063494,0.001746397,0.00061227,0.001256211,0.000442481,0.000851475,0.000404316,0.001007113,0.000524677,0.0003,0.0003,0.000851962,0.00095284,0.00112051,0.000915064,0.000935747,0.001689966,0.000493956,0.000906527,0.001098769,0.001769789,0.001852997,0.001474715,0.001880903,0.002290787,0.002994782,0.00338538,0.003514574,0.003437398,0.0044888,0.004507187,0.006185302,0.005649458,0.0069488,0.007385003,0.008833225,0.013685076,0.016101027,0.023759363,0.028848385,0.031942892,0.056270493,0.045876435,0.082941212,0.126053519,0.175213358,0.230420727,0.291675628,0.358978059,0.432328021,0.511725515])
        else:
            error(999)
            
        # oletetaan, että tk-alkavuus kasvaa 0,7% vuodessa iästä 59 alkaen
        #y=np.arange(53-41)*0.007
        dis2_miehet=dis_miehet
        dis2_miehet[41:]=dis_miehet[41:]#+y

        #y=np.arange(53-41)*0.007
        dis2_naiset=dis_naiset
        dis2_naiset[41:]=dis_naiset[41:]#+y

        for s in range(self.n_empl):
            for g in range(3):
                disab[18:71,g,s]=dfactor[g]*dis2_miehet*unempfactor[s]
                disab[71:(self.max_age+1),g]=disab[70,g,:]
            for g in range(3,6):
                disab[18:71,g,s]=dfactor[g]*dis2_naiset*unempfactor[s]
                disab[71:(self.max_age+1),g]=disab[70,g,:]
            
        disab=1-(1-disab)**self.timestep

        return disab                

    def get_birth_rate_v1(self,debug=False,symmetric=False):
        '''
        Syntyvyysdata
        '''
        birth=np.zeros((self.max_age+1,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        elif symmetric:
            dfactor=np.array([0.8,1.0,1.25,0.8,1.0,1.25])
        else:
            dfactor=np.array([0.75,1.0,1.25,0.5,1.0,1.5])
        for g in range(self.n_groups):
            factor=dfactor[g] # tämä vaikeuttaa sovitetta
            birth[15,g]=0.000177167*factor
            birth[16,g]=0.001049171*factor
            birth[17,g]=0.002303504*factor
            birth[18,g]=0.00630474*factor
            birth[19,g]=0.014399394*factor
            birth[20,g]=0.023042239*factor
            birth[21,g]=0.03088312*factor
            birth[22,g]=0.039755923*factor
            birth[23,g]=0.047483352*factor
            birth[24,g]=0.055630287*factor
            birth[25,g]=0.067942889*factor
            birth[26,g]=0.077108925*factor
            birth[27,g]=0.085396679*factor
            birth[28,g]=0.096968809*factor
            birth[29,g]=0.10081728*factor
            birth[30,g]=0.105586061*factor
            birth[31,g]=0.1124004*factor
            birth[32,g]=0.102667839*factor
            birth[33,g]=0.098528489*factor
            birth[34,g]=0.084080311*factor
            birth[35,g]=0.072335459*factor
            birth[36,g]=0.065203338*factor
            birth[37,g]=0.053073374*factor
            birth[38,g]=0.044054569*factor
            birth[39,g]=0.032984136*factor
            birth[40,g]=0.024135797*factor
            birth[41,g]=0.0174215*factor
            birth[42,g]=0.011621238*factor
            birth[43,g]=0.006909705*factor
            birth[44,g]=0.003977037*factor
            birth[45,g]=0.002171444*factor
            birth[46,g]=0.00115119*factor
            birth[47,g]=0.000712692*factor
            birth[48,g]=9.16478E-05*factor
            birth[49,g]=0.000113167*factor

        # syntyvyys on lasten määrä suhteessa naisten määrään
        # ei siis tarvetta kertoa kahdella, vaikka isät pääsevät isyysvapaalle

        birth=1-(1-birth)**self.timestep

        return birth
        
    def get_birth_rate_v2(self,debug=False,symmetric=False):
        '''
        Syntyvyysdata
        Päivitetty 13.10.2021
        '''
        birth=np.zeros((self.max_age+1,self.n_groups))
        if debug:
            dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        elif symmetric:
            dfactor=np.array([0.8,1.0,1.25,0.8,1.0,1.25])
        else:
            dfactor=np.array([0.75,1.0,1.375,0.6,1.0,1.6])
            
        #if debug:
        #    dfactor=np.array([1.0,1.0,1.0,1.0,1.0,1.0])
        #else:
        #    dfactor=np.array([0.835,1.0,1.25,0.8,1.0,1.3])
            
        if self.year==2018:
            bdata=np.array([0.00569959,0.011937244,0.020951263,0.028827696,0.034751037,0.043394825,0.051886089,0.064069418,0.072356108,0.08,0.090506401,0.096027745,0.100822746,0.103865916,0.098191371,0.088888239,0.082899639,0.072963407,0.061780343,0.051564837,0.042105888,0.033690476,0.024182459,0.016327851,0.011475651,0.006451613,0.003594199,0.001798997,0.000968863,0.000512246,0.000217216,0.000122298,8.5022E-05,5.54493E-05,5.50858E-05,2.74183E-05,0])
        elif self.year==2019:
            bdata=np.array([0.005106294,0.01251173,0.017809014,0.026994415,0.032204898,0.043130066,0.048894492,0.057542032,0.069026601,0.074917822,0.084601199,0.091066413,0.096168316,0.097412349,0.094562935,0.087455326,0.082835408,0.073790916,0.063865266,0.048179811,0.03848964,0.031461604,0.023676012,0.016556785,0.010069873,0.006201687,0.004392827,0.002779339,0.001313062,0.000600901,0.00032001,6.20636E-05,9.18189E-05,0,0,0,0])
        elif self.year==2020:
            bdata=np.array([0.005688202,0.010485019,0.018627077,0.023832221,0.033648899,0.039267615,0.047328391,0.060260487,0.066735234,0.079297218,0.084627153,0.094005372,0.099303578,0.102518399,0.096110234,0.090256969,0.083263698,0.075095719,0.063635595,0.052059117,0.040059723,0.033487533,0.024905683,0.016563637,0.010233222,0.006797141,0.003957784,0.002344314,0.001060346,0.000483592,0.00023331,0.000160041,0.000124066,3.06194E-05,0,2.78002E-05,5.52318E-05])
        elif self.year==2021:
            bdata=np.array([0.005688202,0.010485019,0.018627077,0.023832221,0.033648899,0.039267615,0.047328391,0.060260487,0.066735234,0.079297218,0.084627153,0.094005372,0.099303578,0.102518399,0.096110234,0.090256969,0.083263698,0.075095719,0.063635595,0.052059117,0.040059723,0.033487533,0.024905683,0.016563637,0.010233222,0.006797141,0.003957784,0.002344314,0.001060346,0.000483592,0.00023331,0.000160041,0.000124066,3.06194E-05,0,2.78002E-05,5.52318E-05])
        elif self.year==2022:
            bdata=np.array([0.005688202,0.010485019,0.018627077,0.023832221,0.033648899,0.039267615,0.047328391,0.060260487,0.066735234,0.079297218,0.084627153,0.094005372,0.099303578,0.102518399,0.096110234,0.090256969,0.083263698,0.075095719,0.063635595,0.052059117,0.040059723,0.033487533,0.024905683,0.016563637,0.010233222,0.006797141,0.003957784,0.002344314,0.001060346,0.000483592,0.00023331,0.000160041,0.000124066,3.06194E-05,0,2.78002E-05,5.52318E-05])
        else:
            print('Unknown year',self.year)

        for g in range(self.n_groups):
            factor=dfactor[g] # tämä vaikeuttaa sovitetta
            birth[18:55,g]=bdata*factor

        # syntyvyys on lasten määrä suhteessa naisten määrään
        # ei siis tarvetta kertoa kahdella, vaikka isät pääsevät isyysvapaalle

        birth=1-(1-birth)**self.timestep

        return birth        
        
    def get_pinkslip_rate(self):
        pinkslip_intensity=np.zeros(6)
        if False:
            pinkslip_intensity[0:3]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[3:6]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
        else:
            pinkslip_intensity[0]=0.07 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[1]=0.04 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[2]=0.02 # todennäköisyys tulla irtisanotuksi vuodessa, miehet
            pinkslip_intensity[3]=0.05 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
            pinkslip_intensity[4]=0.04 # todennäköisyys tulla irtisanotuksi vuodessa, naiset
            pinkslip_intensity[5]=0.02 # todennäköisyys tulla irtisanotuksi vuodessa, naiset

        return pinkslip_intensity
        
    def map_5year(self,mar):
        arr=np.zeros(self.max_age+2)
        mins=np.array([15,20,25,30,35,40,45,50,55,60,65,70])
        maxs=np.array([20,25,30,35,40,45,50,55,60,65,70,75])
        for i,mini in enumerate(mins):
            for age in range(mini,maxs[i]):
                if age>=self.min_age and age<self.max_age:
                    arr[age]=mar[i]
                    
        return arr
        
    def get_initial_marriage_ratio(self):
        return 0.0367

    def get_marriage_rate(self):
        '''
        Sisältää avoliitot ja avioliitot
        '''
        marriage_rate=np.zeros(105)
        marriage_rate[18:]=np.array([0.061535,0.081337,0.080677,0.073297,0.088120,0.094667,0.099613,0.094117,0.115097,0.107895,0.121581,0.121740,0.116324,0.127059,0.109727,0.119645,0.113208,0.119336,0.120546,0.110704,0.125037,0.105828,0.119247,0.107601,0.109261,0.106336,0.104943,0.104873,0.103252,0.101176,0.100522,0.097700,0.096217,0.094577,0.094306,0.094023,0.093713,0.096377,0.093411,0.091398,0.090822,0.093518,0.093685,0.091468,0.090411,0.092768,0.095283,0.091210,0.095431,0.096708,0.092017,0.092312,0.089747,0.086757,0.085602,0.084154,0.082202,0.078667,0.074467,0.071651,0.066600,0.062303,0.057827,0.054465,0.047675,0.044414,0.040251,0.035600,0.031737,0.028336,0.025519,0.022941,0.019428,0.016490,0.014366,0.012364,0.010709,0.007886,0.007179,0.007030,0.005709,0.004829,0.003198,0.002946,0.062049,0.003788,0.003333])
        
        marriage_rate=1-(1-marriage_rate)**self.timestep
        
        return marriage_rate

    def get_divorce_rate(self):

        divorce_rate=np.zeros(105)
        divorce_rate[18:]=np.array([0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.050000,0.05,0.050000,0.050000])

        divorce_rate=1-(1-divorce_rate)**self.timestep

        return divorce_rate

    def setup_salaries_v3(self,min_retirementage):
        # TK:n aineisto vuodelta 2018
        # iät 18-70
        
        if self.year==2018:
            palkat_ika_miehet=12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        elif self.year==2019:
            ind=1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2020:
            ind=1.019*1.013
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=ind*12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=ind*12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2021:
            ind=1.019*1.013*1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        elif self.year==2022:
            ind=1.019*1.013*1.019*1.019 # arvio
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        else:
            print('Unknown year ',self.year)
            error(1001)
            
        def map_age18(x):
            return int(x-18)
            
        def ifunc(palkat,x1,x2):
            x = np.linspace(18, 72, num=54, endpoint=True)
            f = interp1d(x, palkat, fill_value='extrapolate')
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
        
            return f(palkat_x)        

        def gfunc(palkat,x1,x2):
            x = np.linspace(18, 73, num=55, endpoint=True)
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
            g=np.zeros((n_time,3))
            for k in range(3):
                f = interp1d(x, palkat[:,k],fill_value='extrapolate')
                g[:,k]=f(palkat_x)
        
            return g
        
        # filtteri
        m_age=int(min_retirementage-1)
        palkat_miehet_ve=palkat_ika_miehet[map_age18(m_age)]
        palkat_ika_miehet[map_age18(m_age):]=np.minimum(palkat_ika_miehet[map_age18(m_age):],palkat_miehet_ve)
        palkat_naiset_ve=palkat_ika_naiset[map_age18(m_age)]
        palkat_ika_naiset[map_age18(m_age):]=np.minimum(palkat_ika_naiset[map_age18(m_age):],palkat_naiset_ve)

        palkat_ika_miehet=ifunc(palkat_ika_miehet,self.min_age,self.max_age)
        palkat_ika_naiset=ifunc(palkat_ika_naiset,self.min_age,self.max_age)
        
        g_r=np.array([[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.8144725,1.011105,1.2677425],[0.814585,1.01229,1.288585],[0.8146975,1.013475,1.3094275],[0.81481,1.01466,1.33027],[0.81481,1.01466,1.33027],[0.798635,1.0116225,1.34756],[0.78246,1.008585,1.36485],[0.766285,1.0055475,1.38214],[0.75011,1.00251,1.39943],[0.75011,1.00251,1.39943],[0.74420478,0.99822499,1.40395702],[0.73829957,0.99393997,1.40848403],[0.73239435,0.98965496,1.41301105],[0.72648913,0.98536995,1.41753806],[0.72058391,0.98108493,1.42206508],[0.7146787,0.97679992,1.4265921],[0.70877348,0.9725149,1.43111911],[0.70286826,0.96822989,1.43564613],[0.69696304,0.96394488,1.44017314],[0.69105783,0.95965986,1.44470016],[0.68515261,0.95537485,1.44922718],[0.67924739,0.95108984,1.45375419],[0.67334218,0.94680482,1.45828121],[0.66743696,0.94251981,1.46280822],[0.66153174,0.93823479,1.46733524],[0.65562652,0.93394978,1.47186226],[0.64972131,0.92966477,1.47638927],[0.64381609,0.92537975,1.48091629],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433]])
        g_r=gfunc(g_r,self.min_age,self.max_age)
        
        return palkat_ika_miehet,palkat_ika_naiset,g_r
        

    def setup_salaries_v4(self,min_retirementage):
        # TK:n aineisto vuodelta 2018
        # iät 18-70
        # päivitetty 2022
        
        if self.year==2018:
            palkat_ika_miehet=12.5*np.array([2039.15,2256.56,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=12.5*np.array([2058.55,2166.68,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        elif self.year==2019:
            ind=1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2020:
            ind=1.019*1.013
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
#             palkat_ika_miehet=ind*12.5*np.array([2039,2334,2461,2498,2612,2683,2725,2833,2915,3014,3115,3196,3325,3389,3477,3540,3601,3690,3724,3863,3917,4018,4073,4150,4189,4212,4301,4273,4261,4323,4273,4225,4239,4188,4213,4174,4159,4165,4131,4136,4167,4135,4117,4134,4126,4101,4257,4368,4417,3916,4369,4045,3165,3923])#,2521,2982,3238,2898,3489,3063,6388,6388])
#             palkat_ika_naiset=ind*12.5*np.array([1926,2107,2188,2235,2283,2347,2417,2541,2639,2722,2796,2845,2907,2980,3032,3073,3109,3150,3225,3281,3333,3402,3467,3462,3492,3546,3593,3577,3603,3542,3525,3511,3515,3470,3484,3482,3477,3480,3408,3417,3428,3381,3361,3351,3292,3314,3461,3553,3583,3441,3039,2797,3320,2168])#,2360,3316,4525,4525,4525,2449,2449,1393])
#             palkat_ika_miehet[0:2]=max(palkat_ika_miehet[0:2])
#             palkat_ika_naiset[0:2]=max(palkat_ika_naiset[0:2])
        elif self.year==2021:
            ind=1.019*1.013*1.019
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        elif self.year==2022:
            ind=1.019*1.013*1.019*1.019 # arvio
            palkat_ika_miehet=ind*12.5*np.array([2339.01,2339.01,2339.01,2489.09,2571.40,2632.58,2718.03,2774.21,2884.89,2987.55,3072.40,3198.48,3283.81,3336.51,3437.30,3483.45,3576.67,3623.00,3731.27,3809.58,3853.66,3995.90,4006.16,4028.60,4104.72,4181.51,4134.13,4157.54,4217.15,4165.21,4141.23,4172.14,4121.26,4127.43,4134.00,4093.10,4065.53,4063.17,4085.31,4071.25,4026.50,4031.17,4047.32,4026.96,4028.39,4163.14,4266.42,4488.40,4201.40,4252.15,4443.96,3316.92,3536.03,3536.03])
            palkat_ika_naiset=ind*12.5*np.array([2223.96,2223.96,2223.96,2257.10,2284.57,2365.57,2443.64,2548.35,2648.06,2712.89,2768.83,2831.99,2896.76,2946.37,2963.84,2993.79,3040.83,3090.43,3142.91,3159.91,3226.95,3272.29,3270.97,3297.32,3333.42,3362.99,3381.84,3342.78,3345.25,3360.21,3324.67,3322.28,3326.72,3326.06,3314.82,3303.73,3302.65,3246.03,3244.65,3248.04,3223.94,3211.96,3167.00,3156.29,3175.23,3228.67,3388.39,3457.17,3400.23,3293.52,2967.68,2702.05,2528.84,2528.84])
        else:
            print('Unknown year ',self.year)
            error(1001)
            
        def map_age18(x):
            return int(x-18)
            
        def ifunc(palkat,x1,x2):
            x = np.linspace(18, 72, num=54, endpoint=True)
            f = interp1d(x, palkat, fill_value='extrapolate')
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
        
            return f(palkat_x)        

        def gfunc(palkat,x1,x2):
            x = np.linspace(18, 73, num=55, endpoint=True)
            n_time = int(np.round((x2-x1)*self.inv_timestep))+2
            palkat_x = np.linspace(x1, x2, num=n_time, endpoint=True)
            g=np.zeros((n_time,3))
            for k in range(3):
                f = interp1d(x, palkat[:,k],fill_value='extrapolate')
                g[:,k]=f(palkat_x)
        
            return g
        
        # filtteri
        m_age=int(min_retirementage-1)
        palkat_miehet_ve=palkat_ika_miehet[map_age18(m_age)]
        palkat_ika_miehet[map_age18(m_age):]=np.minimum(palkat_ika_miehet[map_age18(m_age):],palkat_miehet_ve)
        palkat_naiset_ve=palkat_ika_naiset[map_age18(m_age)]
        palkat_ika_naiset[map_age18(m_age):]=np.minimum(palkat_ika_naiset[map_age18(m_age):],palkat_naiset_ve)

        palkat_ika_miehet=ifunc(palkat_ika_miehet,self.min_age,self.max_age)
        palkat_ika_naiset=ifunc(palkat_ika_naiset,self.min_age,self.max_age)
        
        g_r=np.array([[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.81436,1.00992,1.2469],[0.8144725,1.011105,1.2677425],[0.814585,1.01229,1.288585],[0.8146975,1.013475,1.3094275],[0.81481,1.01466,1.33027],[0.81481,1.01466,1.33027],[0.798635,1.0116225,1.34756],[0.78246,1.008585,1.36485],[0.766285,1.0055475,1.38214],[0.75011,1.00251,1.39943],[0.75011,1.00251,1.39943],[0.74420478,0.99822499,1.40395702],[0.73829957,0.99393997,1.40848403],[0.73239435,0.98965496,1.41301105],[0.72648913,0.98536995,1.41753806],[0.72058391,0.98108493,1.42206508],[0.7146787,0.97679992,1.4265921],[0.70877348,0.9725149,1.43111911],[0.70286826,0.96822989,1.43564613],[0.69696304,0.96394488,1.44017314],[0.69105783,0.95965986,1.44470016],[0.68515261,0.95537485,1.44922718],[0.67924739,0.95108984,1.45375419],[0.67334218,0.94680482,1.45828121],[0.66743696,0.94251981,1.46280822],[0.66153174,0.93823479,1.46733524],[0.65562652,0.93394978,1.47186226],[0.64972131,0.92966477,1.47638927],[0.64381609,0.92537975,1.48091629],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433],[0.63791087,0.92109474,1.4854433]])
        g_r=gfunc(g_r,self.min_age,self.max_age)
        
        return palkat_ika_miehet,palkat_ika_naiset,g_r
        
        
    def infostat_kassanjasenyys_rate(self):
        rate_age=np.array([18,30,40,50,60,74])
        #rate_obs=np.array([0.429,0.836,0.917,0.946,0.933,0.933])
        rate_obs=np.array([0.20,0.836,0.917,0.946,0.933,0.933])
        initial_kassanjasenia=rate_obs[0]
        
        x1=self.min_age
        x2=self.max_age+1
        f = interp1d(rate_age, rate_obs,fill_value='extrapolate')
        n_time = int(np.round((x2-x1)*self.inv_timestep))+2
        jasenyys_x = np.linspace(x1, x2, num=n_time, endpoint=True)

        rate=f(jasenyys_x)
        kassanjasenyys_joinrate=rate*0
        for k in range(0,rate.shape[0]-1):
            kassanjasenyys_joinrate[k+1]=(rate[k+1]-rate[k])/(1-rate[k]) #*self.timestep
        
        kassanjasenyys_rate=rate
            
        return kassanjasenyys_joinrate,kassanjasenyys_rate
        
    def get_reemp_prob(self):
        '''
        reemployment probability in 3 months
        '''
        reemp=np.zeros(100)
        reemp[0:25]=0.40 # 0.35
        reemp[25:30]=0.40
        reemp[30:50]=0.50
        reemp[50:100]=0.45
        
        return reemp
        
    def get_tyelpremium(self):
        tyel_kokomaksu=np.zeros((2100,5))
        # data
        tyel_kokomaksu[1962:2022]=[5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.15,5.15,5.65,6.1,6.4,6.9,7.9,9.9,12.0,10.0,11.7,13.3,13.3,12.4,11.1,11.1,11.5,12.2,13.0,13.8,14.9,16.9,16.9,14.4,18.5,18.6,20.6,21.1,21.2,21.5,21.5,21.5,21.1,21.1,21.4,21.4,21.6,21.2,21.1,21.1,21.3,21.6,22.1,22.8,22.8,23.6,24.0,24.0,24.4,24.4,24.4,24.4,24.4,24.4]
        # ETK
        tyel_kokomaksu[2023:2085]=np.array([24.4,24.5,24.5,24.6,24.6,24.7,24.8,24.8,24.9,24.9,25.0,24.9,24.9,24.9,24.9,24.8,24.8,24.7,24.7,24.6,24.6,24.6,24.6,24.6,24.7,24.8,24.8,24.9,25.1,25.2,25.4,25.6,25.8,26.0,26.2,26.5,26.7,27.0,27.2,27.5,27.7,27.9,28.1,28.3,28.5,28.7,28.9,29.1,29.2,29.4,29.5,29.7,29.8,29.9,30.1,30.2,30.3,30.3,30.4,30.4,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5,30.5])/100
        ptel=0.5*(tyel_kokomaksu-tyel_kokomaksu[0])+0.0615 # vuonna 2017 ptel oli 6,15 %
        
        return tyel_kokomaksu
    
#         tyel=np.zeros((2100,5))
#         tyel[1962,:]=[5.0,5.0,0,0,0],
#         tyel[1963,:]=[5.0,5.0,0,0,0],
#         tyel[1964,:]=[5.0,5.0,0,0,0],
#         tyel[1965,:]=[5.0,5.0,0,0,0],
#         tyel[1966,:]=[5.0,5.0,0,0,0],
#         tyel[1967,:]=[5.0,5.0,0,0,0],
#         tyel[1968,:]=[5.0,5.0,0,0,0],
#         tyel[1969,:]=[5.15,5.15,0,0,0],
#         tyel[1970,:]=[5.15,5.15,0,0,0],
#         tyel[1971,:]=[5.65,5.65,0,0,0],
#         tyel[1972,:]=[6.1,6.1,0,0,0],
#         tyel[1973,:]=[6.4,6.4,0,0,0],
#         tyel[1974,:]=[6.9,6.9,0,0,0],
#         tyel[1975,:]=[7.9,7.9,0,0,0],
#         tyel[1976,:]=[9.9,9.9,0,0,0],
#         tyel[1977,:]=[12.0,12.0,0,0,0],
#         tyel[1978,:]=[10.0,10.0,0,0,0],
#         tyel[1979,:]=[11.7,11.7,0,0,0],
#         tyel[1980,:]=[13.3,13.3,0,0,0],
#         tyel[1981,:]=[13.3,13.3,0,0,0],
#         tyel[1982,:]=[12.4,12.4,0,0,0],
#         tyel[1983,:]=[11.1,11.1,0,0,0],
#         tyel[1984,:]=[11.1,11.1,0,0,0],
#         tyel[1985,:]=[11.5,11.5,0,0,0],
#         tyel[1986,:]=[12.2,12.2,0,0,0],
#         tyel[1987,:]=[13.0,13.0,0,0,0],
#         tyel[1988,:]=[13.8,13.8,0,0,0],
#         tyel[1989,:]=[14.9,14.9,0,0,0],
#         tyel[1990,:]=[16.9,16.9,0,0,0],
#         tyel[1991,:]=[16.9,16.9,0,0,0],
#         tyel[1992,:]=[14.4,14.4,0,0,0],
#         tyel[1993,:]=[18.5,18.5,3,3.0,3.0],
#         tyel[1994,:]=[18.6,18.6,3,3.0,3.0],
#         tyel[1995,:]=[20.6,20.6,4,4.0,4.0],
#         tyel[1996,:]=[21.1,21.1,4.3,4.3,4.3],
#         tyel[1997,:]=[21.2,21.2,4.5,4.5,4.5],
#         tyel[1998,:]=[21.5,21.5,4.7,4.7,4.7],
#         tyel[1999,:]=[21.5,21.5,4.7,4.7,4.7],
#         tyel[2000,:]=[21.5,21.5,4.7,4.7,4.7],
#         tyel[2001,:]=[21.1,21.1,4.5,4.5,4.5],
#         tyel[2002,:]=[21.1,21.1,4.4,4.4,4.4],
#         tyel[2003,:]=[21.4,21.4,4.6,4.6,4.6],
#         tyel[2004,:]=[21.4,21.4,4.6,4.6,4.6],
#         tyel[2005,:]=[21.6,21.6,4.7,4.6,5.8],
#         tyel[2006,:]=[21.2,21.2,4.4,4.3,5.4],
#         tyel[2007,:]=[21.1,21.1,4.4,4.3,5.4],
#         tyel[2008,:]=[21.1,21.1,4.3,4.1,5.2],
#         tyel[2009,:]=[21.3,21.3,4.5,4.3,5.4],
#         tyel[2010,:]=[21.6,21.6,4.7,4.5,5.7],
#         tyel[2011,:]=[22.1,22.1,5.0,4.7,6.0],
#         tyel[2012,:]=[22.8,22.8,5.45,5.15,6.50],
#         tyel[2013,:]=[22.8,22.8,5.45,5.15,6.50],
#         tyel[2014,:]=[23.6,23.6,5.85,5.55,7.05],
#         tyel[2015,:]=[24.0,24.0,6.00,5.70,7.20],
#         tyel[2016,:]=[24.0,18.00,6.00,5.70,7.20],
#         tyel[2017,:]=[24.4,17.95,6.45,6.15,7.65],
#         tyel[2018,:]=[24.4,17.75,6.65,6.35,7.85],
#         tyel[2019,:]=[24.4,17.35,7.05,6.75,8.25],
#         tyel[2020,:]=[24.4,16.95,7.45,7.15,8.65],
#         tyel[2021,:]=[24.4,16.95,7.45,7.15,8.65],
#         tyel[2022,:]=[24.4,17.00,7.45,7.15,8.65]    
#        return tyel